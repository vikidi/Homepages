{"version":3,"sources":["views/GameView/Controls.js","views/GameView/World.js","views/GameView/Lights.js","views/GameView/GameView.js"],"names":["Controls","gltf","useThree","camera","gl","scene","gameOn","useRef","keyStates","playerOnFloor","worldOctree","Octree","playerCollider","Capsule","THREE","playerVelocity","playerDirection","sphereGeometry","sphereMaterial","color","roughness","metalness","spheres","sphereIdx","onWindowResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","getSideVector","getWorldDirection","y","normalize","cross","up","getForwardVector","useEffect","addEventListener","document","event","code","console","log","pointerLockElement","current","sphere","collider","center","copy","end","velocity","multiplyScalar","length","shootSphere","fromGraphNode","traverse","child","isMesh","castShadow","receiveShadow","material","map","anisotropy","i","add","push","mesh","useFrame","state","deltaTime","damping","Math","exp","addScaledVector","deltaPosition","clone","translate","result","capsuleIntersect","normal","dot","depth","playerCollitions","position","updatePlayer","forEach","sphereIntersect","s1","j","s2","d2","distanceToSquared","r","radius","sub","v1","v2","d","sqrt","spheresCollisions","updateSpheres","PointerLockControls","World","url","useGLTF","object","Lights","intensity","shadow","near","far","right","left","top","bottom","width","height","bias","GameView","fallback","colorManagement","fov","attach","args"],"mappings":"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","file":"static/js/12.28a06c5a.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport * as THREE from 'three'\nimport { useThree, useFrame } from 'react-three-fiber'\nimport { PointerLockControls } from '@react-three/drei'\nimport { Capsule } from 'three/examples/jsm/math/Capsule'\nimport { Octree } from 'three/examples/jsm/math/Octree'\n\nconst Controls = ({ gltf }) => {\n  const { camera, gl, scene } = useThree()\n  const gameOn = useRef(false)\n\n  const speed = 25\n  const GRAVITY = 30\n\n  const keyStates = {}\n  let playerOnFloor = true\n\n  const worldOctree = new Octree()\n  const playerCollider = new Capsule( new THREE.Vector3( 0, 0.35, 0 ), new THREE.Vector3( 0, 1, 0 ), 0.35 )\n\n  const playerVelocity = new THREE.Vector3()\n  const playerDirection = new THREE.Vector3()\n\n  const NUM_SPHERES = 20\n  const SPHERE_RADIUS = 0.2\n\n  const sphereGeometry = new THREE.SphereGeometry( SPHERE_RADIUS, 32, 32 )\n  const sphereMaterial = new THREE.MeshStandardMaterial({ color: 0x888855, roughness: 0.8, metalness: 0.5 })\n\n  const spheres = []\n  let sphereIdx = 0\n\n  useEffect(() => {\n    window.addEventListener( 'resize', onWindowResize )\n\n    document.addEventListener( 'keyup', ( event ) => {\n      keyStates[ event.code ] = false\n    })\n\n    document.addEventListener( 'keydown', ( event ) => {\n      keyStates[ event.code ] = true\n    })\n\n    document.addEventListener( 'pointerlockchange', () => {\n      console.log(document.pointerLockElement)\n      if (document.pointerLockElement) {\n        gameOn.current = true\n      } else {\n        gameOn.current = false\n      }\n    })\n\n    document.addEventListener( 'click', () => {\n      if (gameOn.current) {\n        shootSphere()\n      }\n    })\n  }, [])\n\n  useEffect(() => {\n    if (gltf) {\n      worldOctree.fromGraphNode( gltf.scene )\n      gltf.scene.traverse( child => {\n        if ( child.isMesh ) {\n          child.castShadow = true\n          child.receiveShadow = true\n\n          if ( child.material.map ) {\n            child.material.map.anisotropy = 8\n          }\n        }\n      })\n    }\n  }, [gltf, worldOctree])\n\n  useEffect(() => {\n    for (let i = 0; i < NUM_SPHERES; ++i) {\n      const sphere = new THREE.Mesh( sphereGeometry, sphereMaterial )\n      sphere.castShadow = true\n      sphere.receiveShadow = true\n\n      scene.add( sphere )\n\n      spheres.push({ mesh: sphere, collider: new THREE.Sphere( new THREE.Vector3( 0, - 100, 0 ), SPHERE_RADIUS ), velocity: new THREE.Vector3() })\n    }\n  }, [scene, sphereGeometry, sphereMaterial, spheres])\n\n  useFrame((state, deltaTime) => {\n    if ( gameOn.current && playerOnFloor ) {\n      if ( keyStates[ 'KeyW' ] ) {\n        playerVelocity.add( getForwardVector().multiplyScalar( speed * deltaTime ))\n      }\n\n      if ( keyStates[ 'KeyS' ] ) {\n        playerVelocity.add(getForwardVector().multiplyScalar( - speed * deltaTime ))\n      }\n\n      if ( keyStates[ 'KeyA' ] ) {\n        playerVelocity.add(getSideVector().multiplyScalar( - speed * deltaTime ))\n      }\n\n      if ( keyStates[ 'KeyD' ] ) {\n        playerVelocity.add(getSideVector().multiplyScalar( speed * deltaTime ))\n      }\n\n      if ( keyStates[ 'Space' ] ) {\n        playerVelocity.y = 15\n      }\n    }\n\n    updatePlayer(deltaTime)\n    updateSpheres(deltaTime)\n  })\n\n  function updatePlayer( deltaTime ) {\n\n    if ( playerOnFloor ) {\n\n      const damping = Math.exp( - 3 * deltaTime ) - 1\n      playerVelocity.addScaledVector( playerVelocity, damping )\n\n    } else {\n\n      playerVelocity.y -= GRAVITY * deltaTime\n\n    }\n\n    const deltaPosition = playerVelocity.clone().multiplyScalar( deltaTime )\n    playerCollider.translate( deltaPosition )\n\n    playerCollitions()\n\n    camera.position.copy( playerCollider.end )\n  }\n\n  function playerCollitions() {\n\n    const result = worldOctree.capsuleIntersect( playerCollider )\n\n    playerOnFloor = false\n\n    if ( result ) {\n\n      playerOnFloor = result.normal.y > 0\n\n      if ( ! playerOnFloor ) {\n\n        playerVelocity.addScaledVector( result.normal, - result.normal.dot( playerVelocity ) )\n\n      }\n\n      playerCollider.translate( result.normal.multiplyScalar( result.depth ) )\n\n    }\n\n  }\n\n  function spheresCollisions() {\n\n    for ( let i = 0; i < spheres.length; i ++ ) {\n\n      const s1 = spheres[ i ]\n\n      for ( let j = i + 1; j < spheres.length; j ++ ) {\n\n        const s2 = spheres[ j ]\n\n        const d2 = s1.collider.center.distanceToSquared( s2.collider.center )\n        const r = s1.collider.radius + s2.collider.radius\n        const r2 = r * r\n\n        if ( d2 < r2 ) {\n\n          const normal = s1.collider.clone().center.sub( s2.collider.center ).normalize()\n          const v1 = normal.clone().multiplyScalar( normal.dot( s1.velocity ) )\n          const v2 = normal.clone().multiplyScalar( normal.dot( s2.velocity ) )\n          s1.velocity.add( v2 ).sub( v1 )\n          s2.velocity.add( v1 ).sub( v2 )\n\n          const d = ( r - Math.sqrt( d2 ) ) / 2\n\n          s1.collider.center.addScaledVector( normal, d )\n          s2.collider.center.addScaledVector( normal, - d )\n\n        }\n\n      }\n\n    }\n\n  }\n\n  function updateSpheres( deltaTime ) {\n\n    spheres.forEach( sphere => {\n\n      sphere.collider.center.addScaledVector( sphere.velocity, deltaTime )\n\n      const result = worldOctree.sphereIntersect( sphere.collider )\n\n      if ( result ) {\n\n        sphere.velocity.addScaledVector( result.normal, - result.normal.dot( sphere.velocity ) * 1.5 )\n        sphere.collider.center.add( result.normal.multiplyScalar( result.depth ) )\n\n      } else {\n\n        sphere.velocity.y -= GRAVITY * deltaTime\n\n      }\n\n      const damping = Math.exp( - 1.5 * deltaTime ) - 1\n      sphere.velocity.addScaledVector( sphere.velocity, damping )\n\n      spheresCollisions()\n\n      sphere.mesh.position.copy( sphere.collider.center )\n\n    } )\n\n  }\n\n  function shootSphere() {\n    const sphere = spheres[ sphereIdx ]\n\n    camera.getWorldDirection( playerDirection )\n\n    sphere.collider.center.copy( playerCollider.end )\n    sphere.velocity.copy( playerDirection ).multiplyScalar( 30 )\n\n    sphereIdx = ( sphereIdx + 1 ) % spheres.length\n  }\n\n  function onWindowResize() {\n    camera.aspect = window.innerWidth / window.innerHeight\n    camera.updateProjectionMatrix()\n\n    gl.setSize( window.innerWidth, window.innerHeight )\n  }\n\n  function getSideVector() {\n    camera.getWorldDirection( playerDirection )\n    playerDirection.y = 0\n    playerDirection.normalize()\n    playerDirection.cross( camera.up )\n\n    return playerDirection\n  }\n\n  function getForwardVector() {\n    camera.getWorldDirection( playerDirection )\n    playerDirection.y = 0\n    playerDirection.normalize()\n\n    return playerDirection\n  }\n\n  return (\n    <>\n      <PointerLockControls />\n    </>\n  )\n}\n\nexport default Controls","import React from 'react'\nimport { useGLTF } from '@react-three/drei'\n\nimport Controls from './Controls'\n\nconst World = ({ url }) => {\n  const gltf = useGLTF(url)\n\n  return (\n    <>\n      <primitive object={gltf.scene} />\n      <Controls gltf={gltf} />\n    </>\n  )\n}\n\nexport default World","import React from 'react'\n\nfunction Lights() {\n  return (\n    <>\n      <ambientLight\n        color={0x6688cc}\n      />\n      <directionalLight\n        color={0xff9999}\n        position={[-1, 1, 2]}\n        intensity={0.5}\n      />\n      <directionalLight\n        color={0x8888ff}\n        position={[0, -1, 0]}\n        intensity={0.2}\n      />\n      <directionalLight\n        color={0xffffaa}\n        position={[-5, 25, -1]}\n        intensity={1.2}\n        castShadow={true}\n        shadow={{\n          camera: {\n            near: 0.01,\n            far: 500,\n            right: 30,\n            left: -30,\n            top: 30,\n            bottom: -30,\n            width: 1024,\n            height: 1024,\n            radius: 4,\n            bias: -0.00006\n          }\n        }}\n      />\n    </>\n  )\n}\n\nexport default Lights","/* eslint-disable no-unused-vars */\nimport React, { Suspense, useRef, useState, useEffect } from 'react'\nimport { extend, Canvas, useFrame, useThree, createPortal } from 'react-three-fiber'\nimport { PointerLockControls, useGLTF, FlyControls } from '@react-three/drei'\n\nimport World from './World'\nimport Lights from './Lights'\nimport Controls from './Controls'\n\nconst GameView = () => {\n\n  return (\n    <Suspense fallback={'LOADING...'} >\n      <Canvas\n        colorManagement\n        camera={{\n          fov: 75,\n          aspect: window.innerWidth / window.innerHeight,\n          near: 0.1,\n          far: 1000\n        }}\n      >\n        <color attach=\"background\" args={[0x88ccff]} />\n        <Lights />\n        <Suspense fallback={'LOADING...'} >\n          <World url='collision-world.glb' />\n          <Controls />\n        </Suspense>\n      </Canvas>\n    </Suspense>\n  )\n}\n\nexport default GameView"],"sourceRoot":""}