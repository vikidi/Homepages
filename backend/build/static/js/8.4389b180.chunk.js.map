{"version":3,"sources":["../node_modules/@react-three/cannon/dist/index.js","../node_modules/gsap/gsap-core.js","../node_modules/gsap/CSSPlugin.js","../node_modules/gsap/index.js","../node_modules/three/examples/jsm/controls/OrbitControls.js","../node_modules/@react-three/drei/core/OrbitControls.js"],"names":["R","B","u","y","I","F","g","b","atob","Uint8Array","length","G","charCodeAt","String","fromCharCode","apply","Uint16Array","buffer","indexOf","Q","substring","C","Blob","type","URL","createObjectURL","L","Worker","m","children","step","gravity","tolerance","U","iterations","V","allowSleep","d","broadphase","Z","axisIndex","X","defaultContactMaterial","x","contactEquationStiffness","size","c","W","gl","s","invalidate","A","positions","Float32Array","quaternions","S","i","N","Y","byteLength","postMessage","op","a","l","xr","isPresenting","current","getSession","requestAnimationFrame","props","onmessage","data","bodies","reduce","observations","forEach","active","target","body","ray","uuid","terminate","h","worker","refs","buffers","events","subscriptions","createElement","Provider","value","args","userData","position","set","rotation","fromArray","quaternion","instanceMatrix","setUsage","Array","count","fill","map","updateMatrix","setMatrixAt","matrix","needsUpdate","onCollide","id","charAt","toUpperCase","slice","copy","z","subscribe","velocity","angularVelocity","linearFactor","angularFactor","mass","linearDamping","angularDamping","sleepSpeedLimit","sleepTimeLimit","collisionFilterGroup","collisionFilterMask","collisionResponse","fixedRotation","applyForce","applyImpulse","applyLocalForce","applyLocalImpulse","at","H","r","fallback","_assertThisInitialized","self","ReferenceError","_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","_suppressOverwrites","_globalTimeline","_win","_coreInitted","_doc","_coreReady","_lastRenderedFrame","_quickTween","_tickerActive","_config","autoSleep","force3D","nullTargetWarn","units","lineHeight","_defaults","duration","overwrite","delay","_bigNum","_tinyNum","_2PI","Math","PI","_HALF_PI","_gsID","_sqrt","sqrt","_cos","cos","_sin","sin","_isString","_isFunction","_isNumber","_isUndefined","_isObject","_isNotFalse","_windowExists","window","_isFuncOrString","_isTypedArray","ArrayBuffer","isView","_isArray","isArray","_strictNumExp","_numExp","_numWithUnitExp","_complexStringNumExp","_relExp","_delimitedValueExp","_unitExp","_globals","_installScope","_install","scope","_merge","gsap","_missingPlugin","property","console","warn","_warn","message","suppress","_addGlobal","name","obj","_emptyFunc","_reservedProps","_lazyTweens","_lazyLookup","_plugins","_effects","_nextGCFrame","_harnessPlugins","_callbackNames","_harness","targets","harnessPlugin","_gsap","harness","targetTest","GSCache","splice","_getCache","toArray","_getProperty","v","getAttribute","_forEachName","names","func","split","_round","round","_arrayContainsAny","toSearch","toFind","_parseVars","params","parent","irVars","isLegacy","varsIndex","vars","defaults","inherit","immediateRender","runBackwards","startAt","_lazyRender","tween","_lazy","render","_lazySafeRender","animation","time","suppressEvents","force","_numericIfPossible","n","parseFloat","match","trim","_passThrough","p","_setDefaults","_setKeyframeDefaults","base","toMerge","_mergeDeep","_copyExcluding","excluding","_inheritDefaults","keyframes","_dp","_removeLinkedListItem","child","firstProp","lastProp","prev","_prev","next","_next","_removeFromParent","onlyIfParentHasAutoRemove","autoRemoveChildren","remove","_act","_uncache","_end","_dur","_start","_dirty","_recacheAncestors","totalDuration","_hasNoPausedAncestors","_ts","_elapsedCycleDuration","_repeat","_animationCycle","_tTime","_rDelay","tTime","cycleDuration","whole","floor","_parentToChildTotalTime","parentTime","_tDur","_setEnd","abs","_rts","_alignPlayhead","totalTime","smoothChildTiming","_time","_postAddChecks","timeline","t","_initted","rawTime","_clamp","_zTime","_addToTimeline","skipChecks","_delay","timeScale","sortBy","_addLinkedListItem","_sort","_recent","_scrollTrigger","trigger","ScrollTrigger","_attemptInitTween","_initTween","_pt","lazy","_ticker","frame","push","_parentPlayheadIsBeforeStart","_ref","_lock","_setDuration","skipUncache","leavePlayhead","repeat","dur","totalProgress","_onUpdateTotalDuration","Timeline","_zeroPosition","endTime","_parsePosition","offset","labels","recent","clippedDuration","isNaN","substr","_conditionalReturn","min","max","getUnit","exec","index","_slice","_isArrayLike","nonEmpty","nodeType","_flatten","ar","leaveStrings","accumulator","_accumulator","_wake","call","querySelectorAll","shuffle","sort","random","distribute","each","ease","_parseEase","from","cache","isDecimal","ratios","axis","ratioX","ratioY","center","edges","end","originX","originY","j","wrapAt","distances","grid","getBoundingClientRect","left","amount","_invertEase","_roundModifier","pow","raw","snap","snapTo","radius","is2D","values","increment","dx","dy","closest","roundingIncrement","returnFunction","_wrapArray","wrapper","_replaceRandom","nums","mapRange","inMin","inMax","outMin","outMax","inRange","outRange","_getLabelInDirection","fromTime","backward","distance","label","_callback","executeLazyFirst","callback","callbackScope","_interrupt","progress","_createPlugin","config","isFunc","Plugin","init","this","_props","instanceDefaults","_renderPropTweens","add","_addPropTween","kill","_killPropTweensOf","modifier","_addPluginModifier","rawVars","statics","get","getSetter","_getSetter","aliases","register","prop","PropTween","_255","_colorLookup","aqua","lime","silver","black","maroon","teal","blue","navy","white","olive","yellow","orange","gray","purple","green","red","pink","cyan","transparent","_hue","m1","m2","splitColor","toHSL","forceAlpha","wasHSL","parseInt","Number","_colorOrderData","_colorExp","_formatColors","orderMatchData","shell","result","colors","color","join","replace","shift","RegExp","_hslExp","_colorStringFilter","combined","lastIndex","test","_id","_req","_raf","_self","_delta","_i","_getTime","Date","now","_lagThreshold","_adjustedLag","_startTime","_lastUpdate","_gap","_nextTime","_listeners","_tick","overlap","dispatch","elapsed","manual","tick","deltaRatio","fps","wake","document","gsapVersions","version","GreenSockGlobals","sleep","f","setTimeout","cancelAnimationFrame","clearTimeout","lagSmoothing","threshold","adjustedLag","_fps","_easeMap","_customEaseExp","_quotesExp","_parseObjectInString","val","parsedVal","key","lastIndexOf","_propagateYoyoEase","isYoyo","_first","yoyoEase","_yoyo","_ease","_yEase","defaultEase","open","close","nested","_valueInParentheses","_CE","_configEaseFromString","_insertEase","easeIn","easeOut","easeInOut","lowercaseName","toLowerCase","_easeInOutFromOut","_configElastic","amplitude","period","p1","p2","p3","asin","_configBack","overshoot","power","Linear","easeNone","none","n1","SteppedEase","steps","immediateStart","Animation","Infinity","repeatDelay","yoyo","reversed","reverse","paused","_proto","startTime","arguments","_totalTime","_ptLookup","_pTime","ratio","iteration","_ps","includeRepeats","wrapRepeats","globalTime","seek","restart","includeDelay","play","pause","atTime","resume","isActive","start","eventCallback","_onUpdate","then","onFulfilled","Promise","resolve","_resolve","_then","_prom","_Animation","_this","sortChildren","scrollTrigger","_proto2","to","Tween","fromTo","fromVars","toVars","delayedCall","staggerTo","stagger","onCompleteAll","onCompleteAllParams","onComplete","onCompleteParams","staggerFrom","staggerFromTo","prevPaused","pauseTween","prevStart","prevIteration","prevTime","tDur","crossingStart","rewinding","doesWrap","repeatRefresh","_hasPause","_forcing","_last","_findNextPauseTween","onUpdate","adjustedTime","_this2","addLabel","getChildren","tweens","timelines","ignoreBeforeTime","getById","animations","removeLabel","killTweensOf","_totalTime2","addPause","removePause","onlyActive","getTweensOf","_overwritingTween","parsedTargets","isGlobalTime","_targets","tweenTo","tl","_vars","_onStart","onStart","onStartParams","tweenFromTo","fromPosition","toPosition","nextLabel","afterTime","previousLabel","beforeTime","currentLabel","shiftChildren","adjustLabels","clear","includeLabels","updateRoot","_addComplexStringPropTween","setter","stringFilter","funcParam","startNums","endNum","chunk","startNum","hasRandom","pt","_renderComplexString","matchIndex","e","fp","currentValue","parsedStart","_setterFuncWithParam","_setterFunc","_setterPlain","_renderBoolean","_renderPlain","_checkPlugin","plugin","ptLookup","_parseFuncOrString","style","_processVars","priority","cleanVars","hasPriority","gsData","harnessVars","overwritten","onUpdateParams","autoRevert","prevStartAt","_startAt","fullTargets","autoOverwrite","_overwrite","_op","_sortPropTweensByPriority","_onInit","_from","_staggerTweenProps","_staggerPropsToSkip","_Animation2","skipInherit","_this3","curTarget","staggerFunc","staggerVarsToMerge","_this3$vars","_proto3","onRepeat","prevRatio","_renderZeroDurationTween","overwrittenProps","curLookup","curOverwriteProps","killingTargets","propTweenLookup","firstPT","a1","a2","_arraysMatch","propertyAliases","_addAliasesToVars","onReverseComplete","onReverseCompleteParams","_setterAttribute","setAttribute","hasNonDependentRemaining","dep","_setterWithModifier","mSet","mt","pt2","first","last","pr","change","renderer","TweenMax","TweenLite","TimelineLite","TimelineMax","registerPlugin","_len2","_key2","getProperty","unit","uncache","getter","format","quickSetter","setters","isTweening","registerEffect","_ref2","effect","plugins","extendTimeline","pluginName","registerEase","parseEase","exportRoot","includeDelayedCalls","utils","wrap","range","wrapYoyo","total","normalize","clamp","pipe","_len","functions","_key","unitize","interpolate","mutate","interpolators","il","isString","master","install","effects","ticker","globalTimeline","core","globals","getCache","suppressOverwrites","_getPluginPropTween","_buildModifierPlugin","temp","modifiers","_addModifiers","Power0","Power1","Power2","Power3","Power4","Quad","Cubic","Quart","Quint","Strong","Elastic","Back","Bounce","Sine","Expo","Circ","_docElement","_pluginInitted","_tempDiv","_tempDivStyler","_recentSetterPlugin","_supports3D","_transformProps","_RAD2DEG","_DEG2RAD","_atan2","atan2","_capsExp","_horizontalExp","_complexExp","_propertyAliases","autoAlpha","scale","alpha","_renderCSSProp","_renderPropWithEnd","_renderCSSPropWithBeginning","_renderRoundedCSSProp","_renderNonTweeningValue","_renderNonTweeningValueOnlyAtEnd","_setterCSSStyle","_setterCSSProp","setProperty","_setterTransform","_setterScale","scaleX","scaleY","_setterScaleWithRender","renderTransform","_setterTransformWithRender","_transformProp","_transformOriginProp","_createElement","ns","createElementNS","_getComputedProperty","skipPrefixFallback","cs","getComputedStyle","getPropertyValue","_checkPropPrefix","_prefixes","element","preferPrefix","_initCore","documentElement","cssText","_getBBoxHack","swapIfPossible","bbox","svg","ownerSVGElement","oldParent","parentNode","oldSibling","nextSibling","oldCSS","appendChild","display","getBBox","_gsapBBox","insertBefore","removeChild","_getAttributeFallbacks","attributesArray","hasAttribute","_getBBox","bounds","error","width","height","_isSVG","getCTM","_removeProperty","removeProperty","removeAttribute","_addNonTweeningPT","beginning","onlySetAtEnd","_nonConvertibleUnits","deg","rad","turn","_convertToUnit","px","isSVG","curValue","curUnit","horizontal","isRootSVG","tagName","measureProperty","toPixels","toPercent","_get","_parseTransform","_firstTwoOnly","zOrigin","_specialProps","_tweenComplexCSSString","startValues","startValue","endValue","endUnit","startUnit","relative","_keywordToPercent","top","bottom","right","_convertKeywordsToPercentages","_renderClearProps","clearTransforms","clearProps","_identity2DMatrix","_rotationalProperties","_isNullTransform","_getComputedTransformMatrixAsArray","matrixString","_getMatrix","force2D","addedToDOM","transform","baseVal","consolidate","offsetParent","_applySVGOrigin","origin","originIsAbsolute","smooth","matrixArray","pluginToAddPropTweensTo","determinant","xOriginOld","xOrigin","yOriginOld","yOrigin","xOffsetOld","xOffset","yOffsetOld","yOffset","tx","ty","originSplit","rotationX","rotationY","skewX","skewY","perspective","angle","a12","a22","t1","t2","t3","a13","a23","a33","a42","a43","a32","invertedScaleX","forceCSS","xPercent","offsetWidth","yPercent","offsetHeight","transformPerspective","_renderSVGTransforms","_renderCSSTransforms","_renderNon3DTransforms","_addPxTranslate","_zeroDeg","_zeroPx","_endParenthesis","transforms","use3D","a11","a21","tan","_addRotationalPropTween","direction","cap","finalValue","_addRawTransformPTs","endCache","startCache","side","CSSPlugin","specialProp","isTransformRelated","transformPropTween","parseTransform","smoothOrigin","autoRound","checkPrefix","positionAndScale","others","all","gsapWithCSS","OrbitControls","object","domElement","undefined","enabled","Vector3","minDistance","maxDistance","minZoom","maxZoom","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","autoRotate","autoRotateSpeed","enableKeys","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TOUCH","TWO","DOLLY_PAN","target0","clone","position0","zoom0","zoom","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","saveState","reset","updateProjectionMatrix","dispatchEvent","changeEvent","update","state","STATE","NONE","quat","Quaternion","setFromUnitVectors","up","quatInverse","invert","lastPosition","lastQuaternion","twoPI","sub","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","isFinite","makeSafe","addScaledVector","panOffset","setFromSpherical","lookAt","multiplyScalar","zoomChanged","distanceToSquared","EPS","dot","dispose","removeEventListener","onContextMenu","onPointerDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","ownerDocument","onPointerMove","onPointerUp","onKeyDown","startEvent","endEvent","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","rotateUp","panLeft","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","isPerspectiveCamera","targetDistance","fov","clientHeight","isOrthographicCamera","clientWidth","dollyOut","dollyScale","dollyIn","handleMouseDownRotate","event","clientX","clientY","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","handleTouchMoveRotate","subVectors","handleTouchMovePan","handleTouchMoveDolly","pointerType","mouseAction","preventDefault","focus","button","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","addEventListener","onMouseDown","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","onMouseUp","stopPropagation","handleMouseWheel","keyCode","handleKeyDown","handleTouchStartDollyPan","DOLLY_ROTATE","handleTouchStartDollyRotate","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","EventDispatcher","MapControls","forwardRef","ref","useThree","camera","controls","useEffectfulState","OrbitControls$1","useFrame","useEffect","_extends"],"mappings":"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","file":"static/js/8.4389b180.chunk.js","sourcesContent":["import I,{createContext as B,useState as F,useRef as g,useMemo as b,useEffect as G,useContext as Q,useLayoutEffect as C,Suspense as U}from\"react\";import{useThree as c,useFrame as l}from\"react-three-fiber\";import{Object3D as V,MathUtils as d,InstancedMesh as Z,DynamicDrawUsage as X,Vector3 as x}from\"three\";const R=B({});function L(I,B,F){var g=void 0===B?null:B,b=function(I,B){var F=atob(I);if(B){for(var g=new Uint8Array(F.length),b=0,G=F.length;b<G;++b)g[b]=F.charCodeAt(b);return String.fromCharCode.apply(null,new Uint16Array(g.buffer))}return F}(I,void 0!==F&&F),G=b.indexOf(\"\\n\",10)+1,Q=b.substring(G)+(g?\"//# sourceMappingURL=\"+g:\"\"),C=new Blob([Q],{type:\"application/javascript\"});return URL.createObjectURL(C)}var W,s,A,u,y=(W=\"\",s=\"data:application/json;charset=utf-8;base64,\",A=!1,function(I){return u=u||L(W,s,A),new Worker(u,I)});function m({children:B,step:Q=1/60,gravity:C=[0,-10,0],tolerance:U=.001,iterations:V=5,allowSleep:d=!1,broadphase:Z=\"Naive\",axisIndex:X=0,defaultContactMaterial:x={contactEquationStiffness:1e6},size:L=1e3}){const{gl:W,invalidate:s}=c(),[A]=F((()=>new y)),[u]=F({}),[m]=F((()=>({positions:new Float32Array(3*L),quaternions:new Float32Array(4*L)}))),[S]=F({}),[i]=F({}),N=g({}),Y=b((()=>()=>{0!==m.positions.byteLength&&0!==m.quaternions.byteLength&&A.postMessage({op:\"step\",...m},[m.positions.buffer,m.quaternions.buffer])}),[]),a=g(!1);l((()=>{var I,B,F;null!=(I=W.xr)&&I.isPresenting&&!a.current&&W.xr.getSession().requestAnimationFrame(Y),null!=(B=W.xr)&&B.isPresenting||!a.current||requestAnimationFrame(Y),a.current=null==(F=W.xr)?void 0:F.isPresenting})),G((()=>(A.postMessage({op:\"init\",props:{gravity:C,tolerance:U,step:Q,iterations:V,broadphase:Z,allowSleep:d,axisIndex:X,defaultContactMaterial:x}}),A.onmessage=I=>{switch(I.data.op){case\"frame\":I.data.bodies&&(N.current=I.data.bodies.reduce(((B,F)=>({...B,[F]:I.data.bodies.indexOf(F)})),{})),m.positions=I.data.positions,m.quaternions=I.data.quaternions,I.data.observations.forEach((([I,B])=>i[I](B))),W.xr&&W.xr.isPresenting?W.xr.getSession().requestAnimationFrame(Y):requestAnimationFrame(Y),I.data.active&&s();break;case\"event\":switch(I.data.type){case\"collide\":S[I.data.target]({...I.data,target:u[I.data.target],body:u[I.data.body]});break;case\"rayhit\":S[I.data.ray.uuid]({...I.data,body:I.data.body?u[I.data.body]:null})}}},Y(),()=>A.terminate())),[]);const h=b((()=>({worker:A,bodies:N,refs:u,buffers:m,events:S,subscriptions:i})),[A,N,u,m,S,i]);return I.createElement(R.Provider,{value:h},B)}const S=new V;function i(I,B,F){return B.args=F(B.args),I.userData=B.userData||{},I.position.set(...B.position||[0,0,0]),I.rotation.set(...B.rotation||[0,0,0]),B}function N(I,B,F){void 0!==B&&(I.position.fromArray(F.positions,3*B),I.quaternion.fromArray(F.quaternions,4*B))}let Y=0;function a(I,B,F,G){const U=g(null),c=G||U,{worker:d,bodies:x,buffers:L,refs:W,events:s,subscriptions:A}=Q(R);C((()=>{c.current||(c.current=new V);const g=c.current,b=d;let G,Q=[g.uuid];return g instanceof Z?(g.instanceMatrix.setUsage(X),Q=new Array(g.count).fill(0).map(((I,B)=>g.uuid+\"/\"+B)),G=Q.map(((I,b)=>{const G=i(S,B(b),F);return S.updateMatrix(),g.setMatrixAt(b,S.matrix),g.instanceMatrix.needsUpdate=!0,G}))):G=[i(g,B(0),F)],G.forEach(((I,B)=>{W[Q[B]]=g,I.onCollide&&(s[Q[B]]=I.onCollide,I.onCollide=!0)})),b.postMessage({op:\"addBodies\",type:I,uuid:Q,props:G}),()=>{G.forEach(((I,B)=>{delete W[Q[B]],I.onCollide&&delete s[Q[B]]})),b.postMessage({op:\"removeBodies\",uuid:Q})}}),[]),l((()=>{if(c.current&&L.positions.length&&L.quaternions.length)if(c.current instanceof Z)for(let I=0;I<c.current.count;I++){const B=x.current[c.current.uuid+\"/\"+I];void 0!==B&&(N(S,B,L),S.updateMatrix(),c.current.setMatrixAt(I,S.matrix)),c.current.instanceMatrix.needsUpdate=!0}else N(c.current,x.current[c.current.uuid],L)}));const u=b((()=>{const I=I=>void 0!==I?c.current.uuid+\"/\"+I:c.current.uuid,B=(B,F,g)=>c.current&&d.postMessage({op:B,uuid:I(F),props:g}),F=(I,F)=>g=>{const b=Y++;return A[b]=g,B(\"subscribe\",F,{id:b,type:I}),()=>{delete A[b],B(\"unsubscribe\",F,b)}},g=(I,B)=>I+B.charAt(0).toUpperCase()+B.slice(1),b=(I,b)=>({set:(F,G,Q)=>B(g(\"set\",I),b,[F,G,Q]),copy:({x:F,y:G,z:Q})=>B(g(\"set\",I),b,[F,G,Q]),subscribe:F(I,b)}),G=(I,b)=>({set:F=>B(g(\"set\",I),b,F),subscribe:F(I,b)});function Q(I){return{position:b(\"position\",I),rotation:b(\"quaternion\",I),velocity:b(\"velocity\",I),angularVelocity:b(\"angularVelocity\",I),linearFactor:b(\"linearFactor\",I),angularFactor:b(\"angularFactor\",I),mass:G(\"mass\",I),linearDamping:G(\"linearDamping\",I),angularDamping:G(\"angularDamping\",I),allowSleep:G(\"allowSleep\",I),sleepSpeedLimit:G(\"sleepSpeedLimit\",I),sleepTimeLimit:G(\"sleepTimeLimit\",I),collisionFilterGroup:G(\"collisionFilterGroup\",I),collisionFilterMask:G(\"collisionFilterMask\",I),collisionResponse:G(\"collisionResponse\",I),fixedRotation:G(\"fixedRotation\",I),userData:G(\"userData\",I),applyForce(F,g){B(\"applyForce\",I,[F,g])},applyImpulse(F,g){B(\"applyImpulse\",I,[F,g])},applyLocalForce(F,g){B(\"applyLocalForce\",I,[F,g])},applyLocalImpulse(F,g){B(\"applyLocalImpulse\",I,[F,g])}}}const C={};return{...Q(void 0),at:I=>C[I]||(C[I]=Q(I))}}),[]);return[c,u]}function h(I,B){return a(\"Plane\",I,(()=>[]),B)}function H(I,B){return a(\"Box\",I,(I=>I||[1,1,1]),B)}function E(I,B){return a(\"Cylinder\",I,(I=>I),B)}function J(I,B){return a(\"Heightfield\",I,(I=>I),B)}function p(I,B){return a(\"Particle\",I,(()=>[]),B)}function k(I,B){return a(\"Sphere\",I,(I=>[null!=I?I:1]),B)}function z(I,B){return a(\"Trimesh\",I,(I=>[I[0].map((I=>I instanceof x?[I.x,I.y,I.z]:I)),I[1]]),B)}function v(I,B){return a(\"ConvexPolyhedron\",I,(I=>[I[0].map((I=>I instanceof x?[I.x,I.y,I.z]:I)),I[1],I[2]&&I[2].map((I=>I instanceof x?[I.x,I.y,I.z]:I))]),B)}function n(I,B){return a(\"Compound\",I,(I=>I||[]),B)}function M(I,B,F,C={},U=[]){const{worker:c}=Q(R),l=d.generateUUID(),V=g(null),Z=g(null);B=null==B?V:B,F=null==F?Z:F,G((()=>{if(B.current&&F.current)return c.postMessage({op:\"addConstraint\",uuid:l,type:I,props:[B.current.uuid,F.current.uuid,C]}),()=>c.postMessage({op:\"removeConstraint\",uuid:l})}),U);const X=b((()=>({enable:()=>c.postMessage({op:\"enableConstraint\",uuid:l}),disable:()=>c.postMessage({op:\"disableConstraint\",uuid:l})})),U);return[B,F,X]}function t(I,B,F,g=[]){return M(\"PointToPoint\",I,B,F,g)}function o(I,B,F,g=[]){return M(\"ConeTwist\",I,B,F,g)}function T(I,B,F,g=[]){return M(\"Distance\",I,B,F,g)}function K(I,B,F,g=[]){return M(\"Hinge\",I,B,F,g)}function w(I,B,F,g=[]){return M(\"Lock\",I,B,F,g)}function D(I,B,b,C=[]){const{worker:U,events:c}=Q(R),[l]=F((()=>d.generateUUID())),V=g(null),Z=g(null);return I=null==I?V:I,B=null==B?Z:B,G((()=>{if(I.current&&B.current)return U.postMessage({op:\"addSpring\",uuid:l,props:[I.current.uuid,B.current.uuid,b]}),c[l]=()=>{},()=>{U.postMessage({op:\"removeSpring\",uuid:l}),delete c[l]}}),C),[I,B]}function j(I,B,g,b=[]){const{worker:C,events:U}=Q(R),[c]=F((()=>d.generateUUID()));G((()=>(U[c]=g,C.postMessage({op:\"addRay\",uuid:c,props:{mode:I,...B}}),()=>{C.postMessage({op:\"removeRay\",uuid:c}),delete U[c]})),b)}function e(I,B,F=[]){j(\"Closest\",I,B,F)}function P(I,B,F=[]){j(\"Any\",I,B,F)}function O(I,B,F=[]){j(\"All\",I,B,F)}function q(I,B){const F=B||g(null),{worker:G}=Q(R);C((()=>{var B;F.current||(F.current=new V);const g=G;let b=[F.current.uuid];const Q=I();return g.postMessage({op:\"addRaycastVehicle\",uuid:b,props:[null==(B=Q.chassisBody.current)?void 0:B.uuid,Q.wheels.map((I=>{var B;return null==(B=I.current)?void 0:B.uuid})),Q.wheelInfos,(null==Q?void 0:Q.indexForwardAxis)||2,(null==Q?void 0:Q.indexRightAxis)||0,(null==Q?void 0:Q.indexUpAxis)||1]}),()=>{g.postMessage({op:\"removeRaycastVehicle\",uuid:b})}}),[]);const U=b((()=>{const I=(I,B)=>F.current&&G.postMessage({op:I,uuid:F.current.uuid,props:B});return{setSteeringValue(B,F){I(\"setRaycastVehicleSteeringValue\",[B,F])},applyEngineForce(B,F){I(\"applyRaycastVehicleEngineForce\",[B,F])},setBrake(B,F){I(\"setRaycastVehicleBrake\",[B,F])}}}),[]);return[F,U]}function r(B){return I.createElement(U,{fallback:null},I.createElement(m,B))}export{r as Physics,R as context,H as useBox,n as useCompoundBody,o as useConeTwistConstraint,v as useConvexPolyhedron,E as useCylinder,T as useDistanceConstraint,J as useHeightfield,K as useHingeConstraint,w as useLockConstraint,p as useParticle,h as usePlane,t as usePointToPointConstraint,O as useRaycastAll,P as useRaycastAny,e as useRaycastClosest,q as useRaycastVehicle,k as useSphere,D as useSpring,z as useTrimesh};\n","function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\n/*!\n * GSAP 3.6.0\n * https://greensock.com\n *\n * @license Copyright 2008-2021, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nvar _config = {\n  autoSleep: 120,\n  force3D: \"auto\",\n  nullTargetWarn: 1,\n  units: {\n    lineHeight: \"\"\n  }\n},\n    _defaults = {\n  duration: .5,\n  overwrite: false,\n  delay: 0\n},\n    _suppressOverwrites,\n    _bigNum = 1e8,\n    _tinyNum = 1 / _bigNum,\n    _2PI = Math.PI * 2,\n    _HALF_PI = _2PI / 4,\n    _gsID = 0,\n    _sqrt = Math.sqrt,\n    _cos = Math.cos,\n    _sin = Math.sin,\n    _isString = function _isString(value) {\n  return typeof value === \"string\";\n},\n    _isFunction = function _isFunction(value) {\n  return typeof value === \"function\";\n},\n    _isNumber = function _isNumber(value) {\n  return typeof value === \"number\";\n},\n    _isUndefined = function _isUndefined(value) {\n  return typeof value === \"undefined\";\n},\n    _isObject = function _isObject(value) {\n  return typeof value === \"object\";\n},\n    _isNotFalse = function _isNotFalse(value) {\n  return value !== false;\n},\n    _windowExists = function _windowExists() {\n  return typeof window !== \"undefined\";\n},\n    _isFuncOrString = function _isFuncOrString(value) {\n  return _isFunction(value) || _isString(value);\n},\n    _isTypedArray = typeof ArrayBuffer === \"function\" && ArrayBuffer.isView || function () {},\n    // note: IE10 has ArrayBuffer, but NOT ArrayBuffer.isView().\n_isArray = Array.isArray,\n    _strictNumExp = /(?:-?\\.?\\d|\\.)+/gi,\n    //only numbers (including negatives and decimals) but NOT relative values.\n_numExp = /[-+=.]*\\d+[.e\\-+]*\\d*[e\\-+]*\\d*/g,\n    //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.\n_numWithUnitExp = /[-+=.]*\\d+[.e-]*\\d*[a-z%]*/g,\n    _complexStringNumExp = /[-+=.]*\\d+\\.?\\d*(?:e-|e\\+)?\\d*/gi,\n    //duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.\n_relExp = /[+-]=-?[.\\d]+/,\n    _delimitedValueExp = /[#\\-+.]*\\b[a-z\\d-=+%.]+/gi,\n    _unitExp = /[\\d.+\\-=]+(?:e[-+]\\d*)*/i,\n    _globalTimeline,\n    _win,\n    _coreInitted,\n    _doc,\n    _globals = {},\n    _installScope = {},\n    _coreReady,\n    _install = function _install(scope) {\n  return (_installScope = _merge(scope, _globals)) && gsap;\n},\n    _missingPlugin = function _missingPlugin(property, value) {\n  return console.warn(\"Invalid property\", property, \"set to\", value, \"Missing plugin? gsap.registerPlugin()\");\n},\n    _warn = function _warn(message, suppress) {\n  return !suppress && console.warn(message);\n},\n    _addGlobal = function _addGlobal(name, obj) {\n  return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;\n},\n    _emptyFunc = function _emptyFunc() {\n  return 0;\n},\n    _reservedProps = {},\n    _lazyTweens = [],\n    _lazyLookup = {},\n    _lastRenderedFrame,\n    _plugins = {},\n    _effects = {},\n    _nextGCFrame = 30,\n    _harnessPlugins = [],\n    _callbackNames = \"\",\n    _harness = function _harness(targets) {\n  var target = targets[0],\n      harnessPlugin,\n      i;\n  _isObject(target) || _isFunction(target) || (targets = [targets]);\n\n  if (!(harnessPlugin = (target._gsap || {}).harness)) {\n    // find the first target with a harness. We assume targets passed into an animation will be of similar type, meaning the same kind of harness can be used for them all (performance optimization)\n    i = _harnessPlugins.length;\n\n    while (i-- && !_harnessPlugins[i].targetTest(target)) {}\n\n    harnessPlugin = _harnessPlugins[i];\n  }\n\n  i = targets.length;\n\n  while (i--) {\n    targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);\n  }\n\n  return targets;\n},\n    _getCache = function _getCache(target) {\n  return target._gsap || _harness(toArray(target))[0]._gsap;\n},\n    _getProperty = function _getProperty(target, property, v) {\n  return (v = target[property]) && _isFunction(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;\n},\n    _forEachName = function _forEachName(names, func) {\n  return (names = names.split(\",\")).forEach(func) || names;\n},\n    //split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).\n_round = function _round(value) {\n  return Math.round(value * 100000) / 100000 || 0;\n},\n    _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {\n  //searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.\n  var l = toFind.length,\n      i = 0;\n\n  for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}\n\n  return i < l;\n},\n    _parseVars = function _parseVars(params, type, parent) {\n  //reads the arguments passed to one of the key methods and figures out if the user is defining things with the OLD/legacy syntax where the duration is the 2nd parameter, and then it adjusts things accordingly and spits back the corrected vars object (with the duration added if necessary, as well as runBackwards or startAt or immediateRender). type 0 = to()/staggerTo(), 1 = from()/staggerFrom(), 2 = fromTo()/staggerFromTo()\n  var isLegacy = _isNumber(params[1]),\n      varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),\n      vars = params[varsIndex],\n      irVars;\n\n  isLegacy && (vars.duration = params[1]);\n  vars.parent = parent;\n\n  if (type) {\n    irVars = vars;\n\n    while (parent && !(\"immediateRender\" in irVars)) {\n      // inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.\n      irVars = parent.vars.defaults || {};\n      parent = _isNotFalse(parent.vars.inherit) && parent.parent;\n    }\n\n    vars.immediateRender = _isNotFalse(irVars.immediateRender);\n    type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1]; // \"from\" vars\n  }\n\n  return vars;\n},\n    _lazyRender = function _lazyRender() {\n  var l = _lazyTweens.length,\n      a = _lazyTweens.slice(0),\n      i,\n      tween;\n\n  _lazyLookup = {};\n  _lazyTweens.length = 0;\n\n  for (i = 0; i < l; i++) {\n    tween = a[i];\n    tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);\n  }\n},\n    _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {\n  _lazyTweens.length && _lazyRender();\n  animation.render(time, suppressEvents, force);\n  _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.\n},\n    _numericIfPossible = function _numericIfPossible(value) {\n  var n = parseFloat(value);\n  return (n || n === 0) && (value + \"\").match(_delimitedValueExp).length < 2 ? n : _isString(value) ? value.trim() : value;\n},\n    _passThrough = function _passThrough(p) {\n  return p;\n},\n    _setDefaults = function _setDefaults(obj, defaults) {\n  for (var p in defaults) {\n    p in obj || (obj[p] = defaults[p]);\n  }\n\n  return obj;\n},\n    _setKeyframeDefaults = function _setKeyframeDefaults(obj, defaults) {\n  for (var p in defaults) {\n    p in obj || p === \"duration\" || p === \"ease\" || (obj[p] = defaults[p]);\n  }\n},\n    _merge = function _merge(base, toMerge) {\n  for (var p in toMerge) {\n    base[p] = toMerge[p];\n  }\n\n  return base;\n},\n    _mergeDeep = function _mergeDeep(base, toMerge) {\n  for (var p in toMerge) {\n    p !== \"__proto__\" && p !== \"constructor\" && p !== \"prototype\" && (base[p] = _isObject(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);\n  }\n\n  return base;\n},\n    _copyExcluding = function _copyExcluding(obj, excluding) {\n  var copy = {},\n      p;\n\n  for (p in obj) {\n    p in excluding || (copy[p] = obj[p]);\n  }\n\n  return copy;\n},\n    _inheritDefaults = function _inheritDefaults(vars) {\n  var parent = vars.parent || _globalTimeline,\n      func = vars.keyframes ? _setKeyframeDefaults : _setDefaults;\n\n  if (_isNotFalse(vars.inherit)) {\n    while (parent) {\n      func(vars, parent.vars.defaults);\n      parent = parent.parent || parent._dp;\n    }\n  }\n\n  return vars;\n},\n    _arraysMatch = function _arraysMatch(a1, a2) {\n  var i = a1.length,\n      match = i === a2.length;\n\n  while (match && i-- && a1[i] === a2[i]) {}\n\n  return i < 0;\n},\n    _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {\n  if (firstProp === void 0) {\n    firstProp = \"_first\";\n  }\n\n  if (lastProp === void 0) {\n    lastProp = \"_last\";\n  }\n\n  var prev = parent[lastProp],\n      t;\n\n  if (sortBy) {\n    t = child[sortBy];\n\n    while (prev && prev[sortBy] > t) {\n      prev = prev._prev;\n    }\n  }\n\n  if (prev) {\n    child._next = prev._next;\n    prev._next = child;\n  } else {\n    child._next = parent[firstProp];\n    parent[firstProp] = child;\n  }\n\n  if (child._next) {\n    child._next._prev = child;\n  } else {\n    parent[lastProp] = child;\n  }\n\n  child._prev = prev;\n  child.parent = child._dp = parent;\n  return child;\n},\n    _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {\n  if (firstProp === void 0) {\n    firstProp = \"_first\";\n  }\n\n  if (lastProp === void 0) {\n    lastProp = \"_last\";\n  }\n\n  var prev = child._prev,\n      next = child._next;\n\n  if (prev) {\n    prev._next = next;\n  } else if (parent[firstProp] === child) {\n    parent[firstProp] = next;\n  }\n\n  if (next) {\n    next._prev = prev;\n  } else if (parent[lastProp] === child) {\n    parent[lastProp] = prev;\n  }\n\n  child._next = child._prev = child.parent = null; // don't delete the _dp just so we can revert if necessary. But parent should be null to indicate the item isn't in a linked list.\n},\n    _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {\n  child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove(child);\n  child._act = 0;\n},\n    _uncache = function _uncache(animation, child) {\n  if (animation && (!child || child._end > animation._dur || child._start < 0)) {\n    // performance optimization: if a child animation is passed in we should only uncache if that child EXTENDS the animation (its end time is beyond the end)\n    var a = animation;\n\n    while (a) {\n      a._dirty = 1;\n      a = a.parent;\n    }\n  }\n\n  return animation;\n},\n    _recacheAncestors = function _recacheAncestors(animation) {\n  var parent = animation.parent;\n\n  while (parent && parent.parent) {\n    //sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.\n    parent._dirty = 1;\n    parent.totalDuration();\n    parent = parent.parent;\n  }\n\n  return animation;\n},\n    _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {\n  return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);\n},\n    _elapsedCycleDuration = function _elapsedCycleDuration(animation) {\n  return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;\n},\n    // feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.\n_animationCycle = function _animationCycle(tTime, cycleDuration) {\n  var whole = Math.floor(tTime /= cycleDuration);\n  return tTime && whole === tTime ? whole - 1 : whole;\n},\n    _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {\n  return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);\n},\n    _setEnd = function _setEnd(animation) {\n  return animation._end = _round(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));\n},\n    _alignPlayhead = function _alignPlayhead(animation, totalTime) {\n  // adjusts the animation's _start and _end according to the provided totalTime (only if the parent's smoothChildTiming is true and the animation isn't paused). It doesn't do any rendering or forcing things back into parent timelines, etc. - that's what totalTime() is for.\n  var parent = animation._dp;\n\n  if (parent && parent.smoothChildTiming && animation._ts) {\n    animation._start = _round(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));\n\n    _setEnd(animation);\n\n    parent._dirty || _uncache(parent, animation); //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.\n  }\n\n  return animation;\n},\n\n/*\n_totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {\n\tlet cycleDuration = duration + repeatDelay,\n\t\ttime = _round(clampedTotalTime % cycleDuration);\n\tif (time > duration) {\n\t\ttime = duration;\n\t}\n\treturn (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;\n},\n*/\n_postAddChecks = function _postAddChecks(timeline, child) {\n  var t;\n\n  if (child._time || child._initted && !child._dur) {\n    //in case, for example, the _start is moved on a tween that has already rendered. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning.\n    t = _parentToChildTotalTime(timeline.rawTime(), child);\n\n    if (!child._dur || _clamp(0, child.totalDuration(), t) - child._tTime > _tinyNum) {\n      child.render(t, true);\n    }\n  } //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.\n\n\n  if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {\n    //in case any of the ancestors had completed but should now be enabled...\n    if (timeline._dur < timeline.duration()) {\n      t = timeline;\n\n      while (t._dp) {\n        t.rawTime() >= 0 && t.totalTime(t._tTime); //moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.\n\n        t = t._dp;\n      }\n    }\n\n    timeline._zTime = -_tinyNum; // helps ensure that the next render() will be forced (crossingStart = true in render()), even if the duration hasn't changed (we're adding a child which would need to get rendered). Definitely an edge case. Note: we MUST do this AFTER the loop above where the totalTime() might trigger a render() because this _addToTimeline() method gets called from the Animation constructor, BEFORE tweens even record their targets, etc. so we wouldn't want things to get triggered in the wrong order.\n  }\n},\n    _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {\n  child.parent && _removeFromParent(child);\n  child._start = _round(position + child._delay);\n  child._end = _round(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));\n\n  _addLinkedListItem(timeline, child, \"_first\", \"_last\", timeline._sort ? \"_start\" : 0);\n\n  timeline._recent = child;\n  skipChecks || _postAddChecks(timeline, child);\n  return timeline;\n},\n    _scrollTrigger = function _scrollTrigger(animation, trigger) {\n  return (_globals.ScrollTrigger || _missingPlugin(\"scrollTrigger\", trigger)) && _globals.ScrollTrigger.create(trigger, animation);\n},\n    _attemptInitTween = function _attemptInitTween(tween, totalTime, force, suppressEvents) {\n  _initTween(tween, totalTime);\n\n  if (!tween._initted) {\n    return 1;\n  }\n\n  if (!force && tween._pt && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {\n    _lazyTweens.push(tween);\n\n    tween._lazy = [totalTime, suppressEvents];\n    return 1;\n  }\n},\n    _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {\n  var parent = _ref.parent;\n  return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));\n},\n    // check parent's _lock because when a timeline repeats/yoyos and does its artificial wrapping, we shouldn't force the ratio back to 0\n_renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {\n  var prevRatio = tween.ratio,\n      ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) || (tween._ts < 0 || tween._dp._ts < 0) && tween.data !== \"isFromStart\" && tween.data !== \"isStart\") ? 0 : 1,\n      // if the tween or its parent is reversed and the totalTime is 0, we should go to a ratio of 0.\n  repeatDelay = tween._rDelay,\n      tTime = 0,\n      pt,\n      iteration,\n      prevIteration;\n\n  if (repeatDelay && tween._repeat) {\n    // in case there's a zero-duration tween that has a repeat with a repeatDelay\n    tTime = _clamp(0, tween._tDur, totalTime);\n    iteration = _animationCycle(tTime, repeatDelay);\n    prevIteration = _animationCycle(tween._tTime, repeatDelay);\n    tween._yoyo && iteration & 1 && (ratio = 1 - ratio);\n\n    if (iteration !== prevIteration) {\n      prevRatio = 1 - ratio;\n      tween.vars.repeatRefresh && tween._initted && tween.invalidate();\n    }\n  }\n\n  if (ratio !== prevRatio || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {\n    if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents)) {\n      // if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.\n      return;\n    }\n\n    prevIteration = tween._zTime;\n    tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0); // when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.\n\n    suppressEvents || (suppressEvents = totalTime && !prevIteration); // if it was rendered previously at exactly 0 (_zTime) and now the playhead is moving away, DON'T fire callbacks otherwise they'll seem like duplicates.\n\n    tween.ratio = ratio;\n    tween._from && (ratio = 1 - ratio);\n    tween._time = 0;\n    tween._tTime = tTime;\n    suppressEvents || _callback(tween, \"onStart\");\n    pt = tween._pt;\n\n    while (pt) {\n      pt.r(ratio, pt.d);\n      pt = pt._next;\n    }\n\n    tween._startAt && totalTime < 0 && tween._startAt.render(totalTime, true, true);\n    tween._onUpdate && !suppressEvents && _callback(tween, \"onUpdate\");\n    tTime && tween._repeat && !suppressEvents && tween.parent && _callback(tween, \"onRepeat\");\n\n    if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {\n      ratio && _removeFromParent(tween, 1);\n\n      if (!suppressEvents) {\n        _callback(tween, ratio ? \"onComplete\" : \"onReverseComplete\", true);\n\n        tween._prom && tween._prom();\n      }\n    }\n  } else if (!tween._zTime) {\n    tween._zTime = totalTime;\n  }\n},\n    _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {\n  var child;\n\n  if (time > prevTime) {\n    child = animation._first;\n\n    while (child && child._start <= time) {\n      if (!child._dur && child.data === \"isPause\" && child._start > prevTime) {\n        return child;\n      }\n\n      child = child._next;\n    }\n  } else {\n    child = animation._last;\n\n    while (child && child._start >= time) {\n      if (!child._dur && child.data === \"isPause\" && child._start < prevTime) {\n        return child;\n      }\n\n      child = child._prev;\n    }\n  }\n},\n    _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {\n  var repeat = animation._repeat,\n      dur = _round(duration) || 0,\n      totalProgress = animation._tTime / animation._tDur;\n  totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);\n  animation._dur = dur;\n  animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _round(dur * (repeat + 1) + animation._rDelay * repeat);\n  totalProgress && !leavePlayhead ? _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress) : animation.parent && _setEnd(animation);\n  skipUncache || _uncache(animation.parent, animation);\n  return animation;\n},\n    _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {\n  return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);\n},\n    _zeroPosition = {\n  _start: 0,\n  endTime: _emptyFunc\n},\n    _parsePosition = function _parsePosition(animation, position) {\n  var labels = animation.labels,\n      recent = animation._recent || _zeroPosition,\n      clippedDuration = animation.duration() >= _bigNum ? recent.endTime(false) : animation._dur,\n      //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.\n  i,\n      offset;\n\n  if (_isString(position) && (isNaN(position) || position in labels)) {\n    //if the string is a number like \"1\", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).\n    i = position.charAt(0);\n\n    if (i === \"<\" || i === \">\") {\n      return (i === \"<\" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0);\n    }\n\n    i = position.indexOf(\"=\");\n\n    if (i < 0) {\n      position in labels || (labels[position] = clippedDuration);\n      return labels[position];\n    }\n\n    offset = +(position.charAt(i - 1) + position.substr(i + 1));\n    return i > 1 ? _parsePosition(animation, position.substr(0, i - 1)) + offset : clippedDuration + offset;\n  }\n\n  return position == null ? clippedDuration : +position;\n},\n    _conditionalReturn = function _conditionalReturn(value, func) {\n  return value || value === 0 ? func(value) : func;\n},\n    _clamp = function _clamp(min, max, value) {\n  return value < min ? min : value > max ? max : value;\n},\n    getUnit = function getUnit(value) {\n  if (typeof value !== \"string\") {\n    return \"\";\n  }\n\n  var v = _unitExp.exec(value);\n\n  return v ? value.substr(v.index + v[0].length) : \"\";\n},\n    // note: protect against padded numbers as strings, like \"100.100\". That shouldn't return \"00\" as the unit. If it's numeric, return no unit.\nclamp = function clamp(min, max, value) {\n  return _conditionalReturn(value, function (v) {\n    return _clamp(min, max, v);\n  });\n},\n    _slice = [].slice,\n    _isArrayLike = function _isArrayLike(value, nonEmpty) {\n  return value && _isObject(value) && \"length\" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject(value[0])) && !value.nodeType && value !== _win;\n},\n    _flatten = function _flatten(ar, leaveStrings, accumulator) {\n  if (accumulator === void 0) {\n    accumulator = [];\n  }\n\n  return ar.forEach(function (value) {\n    var _accumulator;\n\n    return _isString(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);\n  }) || accumulator;\n},\n    //takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.\ntoArray = function toArray(value, leaveStrings) {\n  return _isString(value) && !leaveStrings && (_coreInitted || !_wake()) ? _slice.call(_doc.querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];\n},\n    shuffle = function shuffle(a) {\n  return a.sort(function () {\n    return .5 - Math.random();\n  });\n},\n    // alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = Math.floor(Math.random() * i), v = a[--i], a[i] = a[j], a[j] = v); return a;\n//for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following\ndistribute = function distribute(v) {\n  if (_isFunction(v)) {\n    return v;\n  }\n\n  var vars = _isObject(v) ? v : {\n    each: v\n  },\n      //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total \"amount\" that's chunked out among them all.\n  ease = _parseEase(vars.ease),\n      from = vars.from || 0,\n      base = parseFloat(vars.base) || 0,\n      cache = {},\n      isDecimal = from > 0 && from < 1,\n      ratios = isNaN(from) || isDecimal,\n      axis = vars.axis,\n      ratioX = from,\n      ratioY = from;\n\n  if (_isString(from)) {\n    ratioX = ratioY = {\n      center: .5,\n      edges: .5,\n      end: 1\n    }[from] || 0;\n  } else if (!isDecimal && ratios) {\n    ratioX = from[0];\n    ratioY = from[1];\n  }\n\n  return function (i, target, a) {\n    var l = (a || vars).length,\n        distances = cache[l],\n        originX,\n        originY,\n        x,\n        y,\n        d,\n        j,\n        max,\n        min,\n        wrapAt;\n\n    if (!distances) {\n      wrapAt = vars.grid === \"auto\" ? 0 : (vars.grid || [1, _bigNum])[1];\n\n      if (!wrapAt) {\n        max = -_bigNum;\n\n        while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}\n\n        wrapAt--;\n      }\n\n      distances = cache[l] = [];\n      originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;\n      originY = ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;\n      max = 0;\n      min = _bigNum;\n\n      for (j = 0; j < l; j++) {\n        x = j % wrapAt - originX;\n        y = originY - (j / wrapAt | 0);\n        distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === \"y\" ? y : x);\n        d > max && (max = d);\n        d < min && (min = d);\n      }\n\n      from === \"random\" && shuffle(distances);\n      distances.max = max - min;\n      distances.min = min;\n      distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === \"y\" ? l / wrapAt : wrapAt) || 0) * (from === \"edges\" ? -1 : 1);\n      distances.b = l < 0 ? base - l : base;\n      distances.u = getUnit(vars.amount || vars.each) || 0; //unit\n\n      ease = ease && l < 0 ? _invertEase(ease) : ease;\n    }\n\n    l = (distances[i] - distances.min) / distances.max || 0;\n    return _round(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u; //round in order to work around floating point errors\n  };\n},\n    _roundModifier = function _roundModifier(v) {\n  //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.\n  var p = v < 1 ? Math.pow(10, (v + \"\").length - 2) : 1; //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed()\n\n  return function (raw) {\n    var n = Math.round(parseFloat(raw) / v) * v * p;\n    return (n - n % 1) / p + (_isNumber(raw) ? 0 : getUnit(raw)); // n - n % 1 replaces Math.floor() in order to handle negative values properly. For example, Math.floor(-150.00000000000003) is 151!\n  };\n},\n    snap = function snap(snapTo, value) {\n  var isArray = _isArray(snapTo),\n      radius,\n      is2D;\n\n  if (!isArray && _isObject(snapTo)) {\n    radius = isArray = snapTo.radius || _bigNum;\n\n    if (snapTo.values) {\n      snapTo = toArray(snapTo.values);\n\n      if (is2D = !_isNumber(snapTo[0])) {\n        radius *= radius; //performance optimization so we don't have to Math.sqrt() in the loop.\n      }\n    } else {\n      snapTo = _roundModifier(snapTo.increment);\n    }\n  }\n\n  return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction(snapTo) ? function (raw) {\n    is2D = snapTo(raw);\n    return Math.abs(is2D - raw) <= radius ? is2D : raw;\n  } : function (raw) {\n    var x = parseFloat(is2D ? raw.x : raw),\n        y = parseFloat(is2D ? raw.y : 0),\n        min = _bigNum,\n        closest = 0,\n        i = snapTo.length,\n        dx,\n        dy;\n\n    while (i--) {\n      if (is2D) {\n        dx = snapTo[i].x - x;\n        dy = snapTo[i].y - y;\n        dx = dx * dx + dy * dy;\n      } else {\n        dx = Math.abs(snapTo[i] - x);\n      }\n\n      if (dx < min) {\n        min = dx;\n        closest = i;\n      }\n    }\n\n    closest = !radius || min <= radius ? snapTo[closest] : raw;\n    return is2D || closest === raw || _isNumber(raw) ? closest : closest + getUnit(raw);\n  });\n},\n    random = function random(min, max, roundingIncrement, returnFunction) {\n  return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {\n    return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + \"\").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;\n  });\n},\n    pipe = function pipe() {\n  for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {\n    functions[_key] = arguments[_key];\n  }\n\n  return function (value) {\n    return functions.reduce(function (v, f) {\n      return f(v);\n    }, value);\n  };\n},\n    unitize = function unitize(func, unit) {\n  return function (value) {\n    return func(parseFloat(value)) + (unit || getUnit(value));\n  };\n},\n    normalize = function normalize(min, max, value) {\n  return mapRange(min, max, 0, 1, value);\n},\n    _wrapArray = function _wrapArray(a, wrapper, value) {\n  return _conditionalReturn(value, function (index) {\n    return a[~~wrapper(index)];\n  });\n},\n    wrap = function wrap(min, max, value) {\n  // NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).\n  var range = max - min;\n  return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {\n    return (range + (value - min) % range) % range + min;\n  });\n},\n    wrapYoyo = function wrapYoyo(min, max, value) {\n  var range = max - min,\n      total = range * 2;\n  return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {\n    value = (total + (value - min) % total) % total || 0;\n    return min + (value > range ? total - value : value);\n  });\n},\n    _replaceRandom = function _replaceRandom(value) {\n  //replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])\n  var prev = 0,\n      s = \"\",\n      i,\n      nums,\n      end,\n      isArray;\n\n  while (~(i = value.indexOf(\"random(\", prev))) {\n    end = value.indexOf(\")\", i);\n    isArray = value.charAt(i + 7) === \"[\";\n    nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);\n    s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);\n    prev = end + 1;\n  }\n\n  return s + value.substr(prev, value.length - prev);\n},\n    mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {\n  var inRange = inMax - inMin,\n      outRange = outMax - outMin;\n  return _conditionalReturn(value, function (value) {\n    return outMin + ((value - inMin) / inRange * outRange || 0);\n  });\n},\n    interpolate = function interpolate(start, end, progress, mutate) {\n  var func = isNaN(start + end) ? 0 : function (p) {\n    return (1 - p) * start + p * end;\n  };\n\n  if (!func) {\n    var isString = _isString(start),\n        master = {},\n        p,\n        i,\n        interpolators,\n        l,\n        il;\n\n    progress === true && (mutate = 1) && (progress = null);\n\n    if (isString) {\n      start = {\n        p: start\n      };\n      end = {\n        p: end\n      };\n    } else if (_isArray(start) && !_isArray(end)) {\n      interpolators = [];\n      l = start.length;\n      il = l - 2;\n\n      for (i = 1; i < l; i++) {\n        interpolators.push(interpolate(start[i - 1], start[i])); //build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.\n      }\n\n      l--;\n\n      func = function func(p) {\n        p *= l;\n        var i = Math.min(il, ~~p);\n        return interpolators[i](p - i);\n      };\n\n      progress = end;\n    } else if (!mutate) {\n      start = _merge(_isArray(start) ? [] : {}, start);\n    }\n\n    if (!interpolators) {\n      for (p in end) {\n        _addPropTween.call(master, start, p, \"get\", end[p]);\n      }\n\n      func = function func(p) {\n        return _renderPropTweens(p, master) || (isString ? start.p : start);\n      };\n    }\n  }\n\n  return _conditionalReturn(progress, func);\n},\n    _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {\n  //used for nextLabel() and previousLabel()\n  var labels = timeline.labels,\n      min = _bigNum,\n      p,\n      distance,\n      label;\n\n  for (p in labels) {\n    distance = labels[p] - fromTime;\n\n    if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {\n      label = p;\n      min = distance;\n    }\n  }\n\n  return label;\n},\n    _callback = function _callback(animation, type, executeLazyFirst) {\n  var v = animation.vars,\n      callback = v[type],\n      params,\n      scope;\n\n  if (!callback) {\n    return;\n  }\n\n  params = v[type + \"Params\"];\n  scope = v.callbackScope || animation;\n  executeLazyFirst && _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.\n\n  return params ? callback.apply(scope, params) : callback.call(scope);\n},\n    _interrupt = function _interrupt(animation) {\n  _removeFromParent(animation);\n\n  animation.progress() < 1 && _callback(animation, \"onInterrupt\");\n  return animation;\n},\n    _quickTween,\n    _createPlugin = function _createPlugin(config) {\n  config = !config.name && config[\"default\"] || config; //UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.\n\n  var name = config.name,\n      isFunc = _isFunction(config),\n      Plugin = name && !isFunc && config.init ? function () {\n    this._props = [];\n  } : config,\n      //in case someone passes in an object that's not a plugin, like CustomEase\n  instanceDefaults = {\n    init: _emptyFunc,\n    render: _renderPropTweens,\n    add: _addPropTween,\n    kill: _killPropTweensOf,\n    modifier: _addPluginModifier,\n    rawVars: 0\n  },\n      statics = {\n    targetTest: 0,\n    get: 0,\n    getSetter: _getSetter,\n    aliases: {},\n    register: 0\n  };\n\n  _wake();\n\n  if (config !== Plugin) {\n    if (_plugins[name]) {\n      return;\n    }\n\n    _setDefaults(Plugin, _setDefaults(_copyExcluding(config, instanceDefaults), statics)); //static methods\n\n\n    _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics))); //instance methods\n\n\n    _plugins[Plugin.prop = name] = Plugin;\n\n    if (config.targetTest) {\n      _harnessPlugins.push(Plugin);\n\n      _reservedProps[name] = 1;\n    }\n\n    name = (name === \"css\" ? \"CSS\" : name.charAt(0).toUpperCase() + name.substr(1)) + \"Plugin\"; //for the global name. \"motionPath\" should become MotionPathPlugin\n  }\n\n  _addGlobal(name, Plugin);\n\n  config.register && config.register(gsap, Plugin, PropTween);\n},\n\n/*\n * --------------------------------------------------------------------------------------\n * COLORS\n * --------------------------------------------------------------------------------------\n */\n_255 = 255,\n    _colorLookup = {\n  aqua: [0, _255, _255],\n  lime: [0, _255, 0],\n  silver: [192, 192, 192],\n  black: [0, 0, 0],\n  maroon: [128, 0, 0],\n  teal: [0, 128, 128],\n  blue: [0, 0, _255],\n  navy: [0, 0, 128],\n  white: [_255, _255, _255],\n  olive: [128, 128, 0],\n  yellow: [_255, _255, 0],\n  orange: [_255, 165, 0],\n  gray: [128, 128, 128],\n  purple: [128, 0, 128],\n  green: [0, 128, 0],\n  red: [_255, 0, 0],\n  pink: [_255, 192, 203],\n  cyan: [0, _255, _255],\n  transparent: [_255, _255, _255, 0]\n},\n    _hue = function _hue(h, m1, m2) {\n  h = h < 0 ? h + 1 : h > 1 ? h - 1 : h;\n  return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;\n},\n    splitColor = function splitColor(v, toHSL, forceAlpha) {\n  var a = !v ? _colorLookup.black : _isNumber(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,\n      r,\n      g,\n      b,\n      h,\n      s,\n      l,\n      max,\n      min,\n      d,\n      wasHSL;\n\n  if (!a) {\n    if (v.substr(-1) === \",\") {\n      //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:\"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)\" - in this example \"blue,\" has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.\n      v = v.substr(0, v.length - 1);\n    }\n\n    if (_colorLookup[v]) {\n      a = _colorLookup[v];\n    } else if (v.charAt(0) === \"#\") {\n      if (v.length < 6) {\n        //for shorthand like #9F0 or #9F0F (could have alpha)\n        r = v.charAt(1);\n        g = v.charAt(2);\n        b = v.charAt(3);\n        v = \"#\" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : \"\");\n      }\n\n      if (v.length === 9) {\n        // hex with alpha, like #fd5e53ff\n        a = parseInt(v.substr(1, 6), 16);\n        return [a >> 16, a >> 8 & _255, a & _255, parseInt(v.substr(7), 16) / 255];\n      }\n\n      v = parseInt(v.substr(1), 16);\n      a = [v >> 16, v >> 8 & _255, v & _255];\n    } else if (v.substr(0, 3) === \"hsl\") {\n      a = wasHSL = v.match(_strictNumExp);\n\n      if (!toHSL) {\n        h = +a[0] % 360 / 360;\n        s = +a[1] / 100;\n        l = +a[2] / 100;\n        g = l <= .5 ? l * (s + 1) : l + s - l * s;\n        r = l * 2 - g;\n        a.length > 3 && (a[3] *= 1); //cast as number\n\n        a[0] = _hue(h + 1 / 3, r, g);\n        a[1] = _hue(h, r, g);\n        a[2] = _hue(h - 1 / 3, r, g);\n      } else if (~v.indexOf(\"=\")) {\n        //if relative values are found, just return the raw strings with the relative prefixes in place.\n        a = v.match(_numExp);\n        forceAlpha && a.length < 4 && (a[3] = 1);\n        return a;\n      }\n    } else {\n      a = v.match(_strictNumExp) || _colorLookup.transparent;\n    }\n\n    a = a.map(Number);\n  }\n\n  if (toHSL && !wasHSL) {\n    r = a[0] / _255;\n    g = a[1] / _255;\n    b = a[2] / _255;\n    max = Math.max(r, g, b);\n    min = Math.min(r, g, b);\n    l = (max + min) / 2;\n\n    if (max === min) {\n      h = s = 0;\n    } else {\n      d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n      h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;\n      h *= 60;\n    }\n\n    a[0] = ~~(h + .5);\n    a[1] = ~~(s * 100 + .5);\n    a[2] = ~~(l * 100 + .5);\n  }\n\n  forceAlpha && a.length < 4 && (a[3] = 1);\n  return a;\n},\n    _colorOrderData = function _colorOrderData(v) {\n  // strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a \"c\" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()\n  var values = [],\n      c = [],\n      i = -1;\n  v.split(_colorExp).forEach(function (v) {\n    var a = v.match(_numWithUnitExp) || [];\n    values.push.apply(values, a);\n    c.push(i += a.length + 1);\n  });\n  values.c = c;\n  return values;\n},\n    _formatColors = function _formatColors(s, toHSL, orderMatchData) {\n  var result = \"\",\n      colors = (s + result).match(_colorExp),\n      type = toHSL ? \"hsla(\" : \"rgba(\",\n      i = 0,\n      c,\n      shell,\n      d,\n      l;\n\n  if (!colors) {\n    return s;\n  }\n\n  colors = colors.map(function (color) {\n    return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + \",\" + color[1] + \"%,\" + color[2] + \"%,\" + color[3] : color.join(\",\")) + \")\";\n  });\n\n  if (orderMatchData) {\n    d = _colorOrderData(s);\n    c = orderMatchData.c;\n\n    if (c.join(result) !== d.c.join(result)) {\n      shell = s.replace(_colorExp, \"1\").split(_numWithUnitExp);\n      l = shell.length - 1;\n\n      for (; i < l; i++) {\n        result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + \"0,0,0,0)\" : (d.length ? d : colors.length ? colors : orderMatchData).shift());\n      }\n    }\n  }\n\n  if (!shell) {\n    shell = s.split(_colorExp);\n    l = shell.length - 1;\n\n    for (; i < l; i++) {\n      result += shell[i] + colors[i];\n    }\n  }\n\n  return result + shell[l];\n},\n    _colorExp = function () {\n  var s = \"(?:\\\\b(?:(?:rgb|rgba|hsl|hsla)\\\\(.+?\\\\))|\\\\B#(?:[0-9a-f]{3,4}){1,2}\\\\b\",\n      //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,\n  p;\n\n  for (p in _colorLookup) {\n    s += \"|\" + p + \"\\\\b\";\n  }\n\n  return new RegExp(s + \")\", \"gi\");\n}(),\n    _hslExp = /hsl[a]?\\(/,\n    _colorStringFilter = function _colorStringFilter(a) {\n  var combined = a.join(\" \"),\n      toHSL;\n  _colorExp.lastIndex = 0;\n\n  if (_colorExp.test(combined)) {\n    toHSL = _hslExp.test(combined);\n    a[1] = _formatColors(a[1], toHSL);\n    a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1])); // make sure the order of numbers/colors match with the END value.\n\n    return true;\n  }\n},\n\n/*\n * --------------------------------------------------------------------------------------\n * TICKER\n * --------------------------------------------------------------------------------------\n */\n_tickerActive,\n    _ticker = function () {\n  var _getTime = Date.now,\n      _lagThreshold = 500,\n      _adjustedLag = 33,\n      _startTime = _getTime(),\n      _lastUpdate = _startTime,\n      _gap = 1000 / 240,\n      _nextTime = _gap,\n      _listeners = [],\n      _id,\n      _req,\n      _raf,\n      _self,\n      _delta,\n      _i,\n      _tick = function _tick(v) {\n    var elapsed = _getTime() - _lastUpdate,\n        manual = v === true,\n        overlap,\n        dispatch,\n        time,\n        frame;\n\n    elapsed > _lagThreshold && (_startTime += elapsed - _adjustedLag);\n    _lastUpdate += elapsed;\n    time = _lastUpdate - _startTime;\n    overlap = time - _nextTime;\n\n    if (overlap > 0 || manual) {\n      frame = ++_self.frame;\n      _delta = time - _self.time * 1000;\n      _self.time = time = time / 1000;\n      _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);\n      dispatch = 1;\n    }\n\n    manual || (_id = _req(_tick)); //make sure the request is made before we dispatch the \"tick\" event so that timing is maintained. Otherwise, if processing the \"tick\" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.\n\n    if (dispatch) {\n      for (_i = 0; _i < _listeners.length; _i++) {\n        // use _i and check _listeners.length instead of a variable because a listener could get removed during the loop, and if that happens to an element less than the current index, it'd throw things off in the loop.\n        _listeners[_i](time, _delta, frame, v);\n      }\n    }\n  };\n\n  _self = {\n    time: 0,\n    frame: 0,\n    tick: function tick() {\n      _tick(true);\n    },\n    deltaRatio: function deltaRatio(fps) {\n      return _delta / (1000 / (fps || 60));\n    },\n    wake: function wake() {\n      if (_coreReady) {\n        if (!_coreInitted && _windowExists()) {\n          _win = _coreInitted = window;\n          _doc = _win.document || {};\n          _globals.gsap = gsap;\n          (_win.gsapVersions || (_win.gsapVersions = [])).push(gsap.version);\n\n          _install(_installScope || _win.GreenSockGlobals || !_win.gsap && _win || {});\n\n          _raf = _win.requestAnimationFrame;\n        }\n\n        _id && _self.sleep();\n\n        _req = _raf || function (f) {\n          return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);\n        };\n\n        _tickerActive = 1;\n\n        _tick(2);\n      }\n    },\n    sleep: function sleep() {\n      (_raf ? _win.cancelAnimationFrame : clearTimeout)(_id);\n      _tickerActive = 0;\n      _req = _emptyFunc;\n    },\n    lagSmoothing: function lagSmoothing(threshold, adjustedLag) {\n      _lagThreshold = threshold || 1 / _tinyNum; //zero should be interpreted as basically unlimited\n\n      _adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);\n    },\n    fps: function fps(_fps) {\n      _gap = 1000 / (_fps || 240);\n      _nextTime = _self.time * 1000 + _gap;\n    },\n    add: function add(callback) {\n      _listeners.indexOf(callback) < 0 && _listeners.push(callback);\n\n      _wake();\n    },\n    remove: function remove(callback) {\n      var i;\n      ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;\n    },\n    _listeners: _listeners\n  };\n  return _self;\n}(),\n    _wake = function _wake() {\n  return !_tickerActive && _ticker.wake();\n},\n    //also ensures the core classes are initialized.\n\n/*\n* -------------------------------------------------\n* EASING\n* -------------------------------------------------\n*/\n_easeMap = {},\n    _customEaseExp = /^[\\d.\\-M][\\d.\\-,\\s]/,\n    _quotesExp = /[\"']/g,\n    _parseObjectInString = function _parseObjectInString(value) {\n  //takes a string like \"{wiggles:10, type:anticipate})\" and turns it into a real object. Notice it ends in \")\" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.\n  var obj = {},\n      split = value.substr(1, value.length - 3).split(\":\"),\n      key = split[0],\n      i = 1,\n      l = split.length,\n      index,\n      val,\n      parsedVal;\n\n  for (; i < l; i++) {\n    val = split[i];\n    index = i !== l - 1 ? val.lastIndexOf(\",\") : val.length;\n    parsedVal = val.substr(0, index);\n    obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, \"\").trim() : +parsedVal;\n    key = val.substr(index + 1).trim();\n  }\n\n  return obj;\n},\n    _valueInParentheses = function _valueInParentheses(value) {\n  var open = value.indexOf(\"(\") + 1,\n      close = value.indexOf(\")\"),\n      nested = value.indexOf(\"(\", open);\n  return value.substring(open, ~nested && nested < close ? value.indexOf(\")\", close + 1) : close);\n},\n    _configEaseFromString = function _configEaseFromString(name) {\n  //name can be a string like \"elastic.out(1,0.5)\", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).\n  var split = (name + \"\").split(\"(\"),\n      ease = _easeMap[split[0]];\n  return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf(\"{\") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(\",\").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE(\"\", name) : ease;\n},\n    _invertEase = function _invertEase(ease) {\n  return function (p) {\n    return 1 - ease(1 - p);\n  };\n},\n    // allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos.\n_propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {\n  var child = timeline._first,\n      ease;\n\n  while (child) {\n    if (child instanceof Timeline) {\n      _propagateYoyoEase(child, isYoyo);\n    } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {\n      if (child.timeline) {\n        _propagateYoyoEase(child.timeline, isYoyo);\n      } else {\n        ease = child._ease;\n        child._ease = child._yEase;\n        child._yEase = ease;\n        child._yoyo = isYoyo;\n      }\n    }\n\n    child = child._next;\n  }\n},\n    _parseEase = function _parseEase(ease, defaultEase) {\n  return !ease ? defaultEase : (_isFunction(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;\n},\n    _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {\n  if (easeOut === void 0) {\n    easeOut = function easeOut(p) {\n      return 1 - easeIn(1 - p);\n    };\n  }\n\n  if (easeInOut === void 0) {\n    easeInOut = function easeInOut(p) {\n      return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;\n    };\n  }\n\n  var ease = {\n    easeIn: easeIn,\n    easeOut: easeOut,\n    easeInOut: easeInOut\n  },\n      lowercaseName;\n\n  _forEachName(names, function (name) {\n    _easeMap[name] = _globals[name] = ease;\n    _easeMap[lowercaseName = name.toLowerCase()] = easeOut;\n\n    for (var p in ease) {\n      _easeMap[lowercaseName + (p === \"easeIn\" ? \".in\" : p === \"easeOut\" ? \".out\" : \".inOut\")] = _easeMap[name + \".\" + p] = ease[p];\n    }\n  });\n\n  return ease;\n},\n    _easeInOutFromOut = function _easeInOutFromOut(easeOut) {\n  return function (p) {\n    return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;\n  };\n},\n    _configElastic = function _configElastic(type, amplitude, period) {\n  var p1 = amplitude >= 1 ? amplitude : 1,\n      //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.\n  p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),\n      p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),\n      easeOut = function easeOut(p) {\n    return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;\n  },\n      ease = type === \"out\" ? easeOut : type === \"in\" ? function (p) {\n    return 1 - easeOut(1 - p);\n  } : _easeInOutFromOut(easeOut);\n\n  p2 = _2PI / p2; //precalculate to optimize\n\n  ease.config = function (amplitude, period) {\n    return _configElastic(type, amplitude, period);\n  };\n\n  return ease;\n},\n    _configBack = function _configBack(type, overshoot) {\n  if (overshoot === void 0) {\n    overshoot = 1.70158;\n  }\n\n  var easeOut = function easeOut(p) {\n    return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;\n  },\n      ease = type === \"out\" ? easeOut : type === \"in\" ? function (p) {\n    return 1 - easeOut(1 - p);\n  } : _easeInOutFromOut(easeOut);\n\n  ease.config = function (overshoot) {\n    return _configBack(type, overshoot);\n  };\n\n  return ease;\n}; // a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.\n// _weightedEase = ratio => {\n// \tlet y = 0.5 + ratio / 2;\n// \treturn p => (2 * (1 - p) * p * y + p * p);\n// },\n// a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.\n// _weightedEaseStrong = ratio => {\n// \tratio = .5 + ratio / 2;\n// \tlet o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),\n// \t\tb = ratio - o,\n// \t\tc = ratio + o;\n// \treturn p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;\n// };\n\n\n_forEachName(\"Linear,Quad,Cubic,Quart,Quint,Strong\", function (name, i) {\n  var power = i < 5 ? i + 1 : i;\n\n  _insertEase(name + \",Power\" + (power - 1), i ? function (p) {\n    return Math.pow(p, power);\n  } : function (p) {\n    return p;\n  }, function (p) {\n    return 1 - Math.pow(1 - p, power);\n  }, function (p) {\n    return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;\n  });\n});\n\n_easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;\n\n_insertEase(\"Elastic\", _configElastic(\"in\"), _configElastic(\"out\"), _configElastic());\n\n(function (n, c) {\n  var n1 = 1 / c,\n      n2 = 2 * n1,\n      n3 = 2.5 * n1,\n      easeOut = function easeOut(p) {\n    return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;\n  };\n\n  _insertEase(\"Bounce\", function (p) {\n    return 1 - easeOut(1 - p);\n  }, easeOut);\n})(7.5625, 2.75);\n\n_insertEase(\"Expo\", function (p) {\n  return p ? Math.pow(2, 10 * (p - 1)) : 0;\n});\n\n_insertEase(\"Circ\", function (p) {\n  return -(_sqrt(1 - p * p) - 1);\n});\n\n_insertEase(\"Sine\", function (p) {\n  return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;\n});\n\n_insertEase(\"Back\", _configBack(\"in\"), _configBack(\"out\"), _configBack());\n\n_easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {\n  config: function config(steps, immediateStart) {\n    if (steps === void 0) {\n      steps = 1;\n    }\n\n    var p1 = 1 / steps,\n        p2 = steps + (immediateStart ? 0 : 1),\n        p3 = immediateStart ? 1 : 0,\n        max = 1 - _tinyNum;\n    return function (p) {\n      return ((p2 * _clamp(0, max, p) | 0) + p3) * p1;\n    };\n  }\n};\n_defaults.ease = _easeMap[\"quad.out\"];\n\n_forEachName(\"onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt\", function (name) {\n  return _callbackNames += name + \",\" + name + \"Params,\";\n});\n/*\n * --------------------------------------------------------------------------------------\n * CACHE\n * --------------------------------------------------------------------------------------\n */\n\n\nexport var GSCache = function GSCache(target, harness) {\n  this.id = _gsID++;\n  target._gsap = this;\n  this.target = target;\n  this.harness = harness;\n  this.get = harness ? harness.get : _getProperty;\n  this.set = harness ? harness.getSetter : _getSetter;\n};\n/*\n * --------------------------------------------------------------------------------------\n * ANIMATION\n * --------------------------------------------------------------------------------------\n */\n\nexport var Animation = /*#__PURE__*/function () {\n  function Animation(vars, time) {\n    var parent = vars.parent || _globalTimeline;\n    this.vars = vars;\n    this._delay = +vars.delay || 0;\n\n    if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {\n      // TODO: repeat: Infinity on a timeline's children must flag that timeline internally and affect its totalDuration, otherwise it'll stop in the negative direction when reaching the start.\n      this._rDelay = vars.repeatDelay || 0;\n      this._yoyo = !!vars.yoyo || !!vars.yoyoEase;\n    }\n\n    this._ts = 1;\n\n    _setDuration(this, +vars.duration, 1, 1);\n\n    this.data = vars.data;\n    _tickerActive || _ticker.wake();\n    parent && _addToTimeline(parent, this, time || time === 0 ? time : parent._time, 1);\n    vars.reversed && this.reverse();\n    vars.paused && this.paused(true);\n  }\n\n  var _proto = Animation.prototype;\n\n  _proto.delay = function delay(value) {\n    if (value || value === 0) {\n      this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);\n      this._delay = value;\n      return this;\n    }\n\n    return this._delay;\n  };\n\n  _proto.duration = function duration(value) {\n    return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;\n  };\n\n  _proto.totalDuration = function totalDuration(value) {\n    if (!arguments.length) {\n      return this._tDur;\n    }\n\n    this._dirty = 0;\n    return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));\n  };\n\n  _proto.totalTime = function totalTime(_totalTime, suppressEvents) {\n    _wake();\n\n    if (!arguments.length) {\n      return this._tTime;\n    }\n\n    var parent = this._dp;\n\n    if (parent && parent.smoothChildTiming && this._ts) {\n      _alignPlayhead(this, _totalTime);\n\n      !parent._dp || parent.parent || _postAddChecks(parent, this); // edge case: if this is a child of a timeline that already completed, for example, we must re-activate the parent.\n      //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.\n\n      while (parent.parent) {\n        if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {\n          parent.totalTime(parent._tTime, true);\n        }\n\n        parent = parent.parent;\n      }\n\n      if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {\n        //if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.\n        _addToTimeline(this._dp, this, this._start - this._delay);\n      }\n    }\n\n    if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {\n      // check for _ptLookup on a Tween instance to ensure it has actually finished being instantiated, otherwise if this.reverse() gets called in the Animation constructor, it could trigger a render() here even though the _targets weren't populated, thus when _init() is called there won't be any PropTweens (it'll act like the tween is non-functional)\n      this._ts || (this._pTime = _totalTime); // otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause\n      //if (!this._lock) { // avoid endless recursion (not sure we need this yet or if it's worth the performance hit)\n      //   this._lock = 1;\n\n      _lazySafeRender(this, _totalTime, suppressEvents); //   this._lock = 0;\n      //}\n\n    }\n\n    return this;\n  };\n\n  _proto.time = function time(value, suppressEvents) {\n    return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % this._dur || (value ? this._dur : 0), suppressEvents) : this._time; // note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!\n  };\n\n  _proto.totalProgress = function totalProgress(value, suppressEvents) {\n    return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio;\n  };\n\n  _proto.progress = function progress(value, suppressEvents) {\n    return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio;\n  };\n\n  _proto.iteration = function iteration(value, suppressEvents) {\n    var cycleDuration = this.duration() + this._rDelay;\n\n    return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;\n  } // potential future addition:\n  // isPlayingBackwards() {\n  // \tlet animation = this,\n  // \t\torientation = 1; // 1 = forward, -1 = backward\n  // \twhile (animation) {\n  // \t\torientation *= animation.reversed() || (animation.repeat() && !(animation.iteration() & 1)) ? -1 : 1;\n  // \t\tanimation = animation.parent;\n  // \t}\n  // \treturn orientation < 0;\n  // }\n  ;\n\n  _proto.timeScale = function timeScale(value) {\n    if (!arguments.length) {\n      return this._rts === -_tinyNum ? 0 : this._rts; // recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.\n    }\n\n    if (this._rts === value) {\n      return this;\n    }\n\n    var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime; // make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.\n    // prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.\n\n    this._rts = +value || 0;\n    this._ts = this._ps || value === -_tinyNum ? 0 : this._rts; // _ts is the functional timeScale which would be 0 if the animation is paused.\n\n    return _recacheAncestors(this.totalTime(_clamp(-this._delay, this._tDur, tTime), true));\n  };\n\n  _proto.paused = function paused(value) {\n    if (!arguments.length) {\n      return this._ps;\n    }\n\n    if (this._ps !== value) {\n      this._ps = value;\n\n      if (value) {\n        this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()); // if the pause occurs during the delay phase, make sure that's factored in when resuming.\n\n        this._ts = this._act = 0; // _ts is the functional timeScale, so a paused tween would effectively have a timeScale of 0. We record the \"real\" timeScale as _rts (recorded time scale)\n      } else {\n        _wake();\n\n        this._ts = this._rts; //only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.\n\n        this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && (this._tTime -= _tinyNum) && Math.abs(this._zTime) !== _tinyNum); // edge case: animation.progress(1).pause().play() wouldn't render again because the playhead is already at the end, but the call to totalTime() below will add it back to its parent...and not remove it again (since removing only happens upon rendering at a new time). Offsetting the _tTime slightly is done simply to cause the final render in totalTime() that'll pop it off its timeline (if autoRemoveChildren is true, of course). Check to make sure _zTime isn't -_tinyNum to avoid an edge case where the playhead is pushed to the end but INSIDE a tween/callback, the timeline itself is paused thus halting rendering and leaving a few unrendered. When resuming, it wouldn't render those otherwise.\n      }\n    }\n\n    return this;\n  };\n\n  _proto.startTime = function startTime(value) {\n    if (arguments.length) {\n      this._start = value;\n      var parent = this.parent || this._dp;\n      parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);\n      return this;\n    }\n\n    return this._start;\n  };\n\n  _proto.endTime = function endTime(includeRepeats) {\n    return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts);\n  };\n\n  _proto.rawTime = function rawTime(wrapRepeats) {\n    var parent = this.parent || this._dp; // _dp = detatched parent\n\n    return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);\n  };\n\n  _proto.globalTime = function globalTime(rawTime) {\n    var animation = this,\n        time = arguments.length ? rawTime : animation.rawTime();\n\n    while (animation) {\n      time = animation._start + time / (animation._ts || 1);\n      animation = animation._dp;\n    }\n\n    return time;\n  };\n\n  _proto.repeat = function repeat(value) {\n    if (arguments.length) {\n      this._repeat = value === Infinity ? -2 : value;\n      return _onUpdateTotalDuration(this);\n    }\n\n    return this._repeat === -2 ? Infinity : this._repeat;\n  };\n\n  _proto.repeatDelay = function repeatDelay(value) {\n    if (arguments.length) {\n      this._rDelay = value;\n      return _onUpdateTotalDuration(this);\n    }\n\n    return this._rDelay;\n  };\n\n  _proto.yoyo = function yoyo(value) {\n    if (arguments.length) {\n      this._yoyo = value;\n      return this;\n    }\n\n    return this._yoyo;\n  };\n\n  _proto.seek = function seek(position, suppressEvents) {\n    return this.totalTime(_parsePosition(this, position), _isNotFalse(suppressEvents));\n  };\n\n  _proto.restart = function restart(includeDelay, suppressEvents) {\n    return this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));\n  };\n\n  _proto.play = function play(from, suppressEvents) {\n    from != null && this.seek(from, suppressEvents);\n    return this.reversed(false).paused(false);\n  };\n\n  _proto.reverse = function reverse(from, suppressEvents) {\n    from != null && this.seek(from || this.totalDuration(), suppressEvents);\n    return this.reversed(true).paused(false);\n  };\n\n  _proto.pause = function pause(atTime, suppressEvents) {\n    atTime != null && this.seek(atTime, suppressEvents);\n    return this.paused(true);\n  };\n\n  _proto.resume = function resume() {\n    return this.paused(false);\n  };\n\n  _proto.reversed = function reversed(value) {\n    if (arguments.length) {\n      !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0)); // in case timeScale is zero, reversing would have no effect so we use _tinyNum.\n\n      return this;\n    }\n\n    return this._rts < 0;\n  };\n\n  _proto.invalidate = function invalidate() {\n    this._initted = this._act = 0;\n    this._zTime = -_tinyNum;\n    return this;\n  };\n\n  _proto.isActive = function isActive() {\n    var parent = this.parent || this._dp,\n        start = this._start,\n        rawTime;\n    return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);\n  };\n\n  _proto.eventCallback = function eventCallback(type, callback, params) {\n    var vars = this.vars;\n\n    if (arguments.length > 1) {\n      if (!callback) {\n        delete vars[type];\n      } else {\n        vars[type] = callback;\n        params && (vars[type + \"Params\"] = params);\n        type === \"onUpdate\" && (this._onUpdate = callback);\n      }\n\n      return this;\n    }\n\n    return vars[type];\n  };\n\n  _proto.then = function then(onFulfilled) {\n    var self = this;\n    return new Promise(function (resolve) {\n      var f = _isFunction(onFulfilled) ? onFulfilled : _passThrough,\n          _resolve = function _resolve() {\n        var _then = self.then;\n        self.then = null; // temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)\n\n        _isFunction(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);\n        resolve(f);\n        self.then = _then;\n      };\n\n      if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {\n        _resolve();\n      } else {\n        self._prom = _resolve;\n      }\n    });\n  };\n\n  _proto.kill = function kill() {\n    _interrupt(this);\n  };\n\n  return Animation;\n}();\n\n_setDefaults(Animation.prototype, {\n  _time: 0,\n  _start: 0,\n  _end: 0,\n  _tTime: 0,\n  _tDur: 0,\n  _dirty: 0,\n  _repeat: 0,\n  _yoyo: false,\n  parent: null,\n  _initted: false,\n  _rDelay: 0,\n  _ts: 1,\n  _dp: 0,\n  ratio: 0,\n  _zTime: -_tinyNum,\n  _prom: 0,\n  _ps: false,\n  _rts: 1\n});\n/*\n * -------------------------------------------------\n * TIMELINE\n * -------------------------------------------------\n */\n\n\nexport var Timeline = /*#__PURE__*/function (_Animation) {\n  _inheritsLoose(Timeline, _Animation);\n\n  function Timeline(vars, time) {\n    var _this;\n\n    if (vars === void 0) {\n      vars = {};\n    }\n\n    _this = _Animation.call(this, vars, time) || this;\n    _this.labels = {};\n    _this.smoothChildTiming = !!vars.smoothChildTiming;\n    _this.autoRemoveChildren = !!vars.autoRemoveChildren;\n    _this._sort = _isNotFalse(vars.sortChildren);\n    _this.parent && _postAddChecks(_this.parent, _assertThisInitialized(_this));\n    vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);\n    return _this;\n  }\n\n  var _proto2 = Timeline.prototype;\n\n  _proto2.to = function to(targets, vars, position) {\n    new Tween(targets, _parseVars(arguments, 0, this), _parsePosition(this, _isNumber(vars) ? arguments[3] : position));\n    return this;\n  };\n\n  _proto2.from = function from(targets, vars, position) {\n    new Tween(targets, _parseVars(arguments, 1, this), _parsePosition(this, _isNumber(vars) ? arguments[3] : position));\n    return this;\n  };\n\n  _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {\n    new Tween(targets, _parseVars(arguments, 2, this), _parsePosition(this, _isNumber(fromVars) ? arguments[4] : position));\n    return this;\n  };\n\n  _proto2.set = function set(targets, vars, position) {\n    vars.duration = 0;\n    vars.parent = this;\n    _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);\n    vars.immediateRender = !!vars.immediateRender;\n    new Tween(targets, vars, _parsePosition(this, position), 1);\n    return this;\n  };\n\n  _proto2.call = function call(callback, params, position) {\n    return _addToTimeline(this, Tween.delayedCall(0, callback, params), _parsePosition(this, position));\n  } //ONLY for backward compatibility! Maybe delete?\n  ;\n\n  _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {\n    vars.duration = duration;\n    vars.stagger = vars.stagger || stagger;\n    vars.onComplete = onCompleteAll;\n    vars.onCompleteParams = onCompleteAllParams;\n    vars.parent = this;\n    new Tween(targets, vars, _parsePosition(this, position));\n    return this;\n  };\n\n  _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {\n    vars.runBackwards = 1;\n    _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);\n    return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);\n  };\n\n  _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {\n    toVars.startAt = fromVars;\n    _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);\n    return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);\n  };\n\n  _proto2.render = function render(totalTime, suppressEvents, force) {\n    var prevTime = this._time,\n        tDur = this._dirty ? this.totalDuration() : this._tDur,\n        dur = this._dur,\n        tTime = this !== _globalTimeline && totalTime > tDur - _tinyNum && totalTime >= 0 ? tDur : totalTime < _tinyNum ? 0 : totalTime,\n        crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),\n        time,\n        child,\n        next,\n        iteration,\n        cycleDuration,\n        prevPaused,\n        pauseTween,\n        timeScale,\n        prevStart,\n        prevIteration,\n        yoyo,\n        isYoyo;\n\n    if (tTime !== this._tTime || force || crossingStart) {\n      if (prevTime !== this._time && dur) {\n        //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).\n        tTime += this._time - prevTime;\n        totalTime += this._time - prevTime;\n      }\n\n      time = tTime;\n      prevStart = this._start;\n      timeScale = this._ts;\n      prevPaused = !timeScale;\n\n      if (crossingStart) {\n        dur || (prevTime = this._zTime); //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.\n\n        (totalTime || !suppressEvents) && (this._zTime = totalTime);\n      }\n\n      if (this._repeat) {\n        //adjust the time for repeats and yoyos\n        yoyo = this._yoyo;\n        cycleDuration = dur + this._rDelay;\n\n        if (this._repeat < -1 && totalTime < 0) {\n          return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);\n        }\n\n        time = _round(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)\n\n        if (tTime === tDur) {\n          // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)\n          iteration = this._repeat;\n          time = dur;\n        } else {\n          iteration = ~~(tTime / cycleDuration);\n\n          if (iteration && iteration === tTime / cycleDuration) {\n            time = dur;\n            iteration--;\n          }\n\n          time > dur && (time = dur);\n        }\n\n        prevIteration = _animationCycle(this._tTime, cycleDuration);\n        !prevTime && this._tTime && prevIteration !== iteration && (prevIteration = iteration); // edge case - if someone does addPause() at the very beginning of a repeating timeline, that pause is technically at the same spot as the end which causes this._time to get set to 0 when the totalTime would normally place the playhead at the end. See https://greensock.com/forums/topic/23823-closing-nav-animation-not-working-on-ie-and-iphone-6-maybe-other-older-browser/?tab=comments#comment-113005\n\n        if (yoyo && iteration & 1) {\n          time = dur - time;\n          isYoyo = 1;\n        }\n        /*\n        make sure children at the end/beginning of the timeline are rendered properly. If, for example,\n        a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which\n        would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there\n        could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So\n        we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must\n        ensure that zero-duration tweens at the very beginning or end of the Timeline work.\n        */\n\n\n        if (iteration !== prevIteration && !this._lock) {\n          var rewinding = yoyo && prevIteration & 1,\n              doesWrap = rewinding === (yoyo && iteration & 1);\n          iteration < prevIteration && (rewinding = !rewinding);\n          prevTime = rewinding ? 0 : dur;\n          this._lock = 1;\n          this.render(prevTime || (isYoyo ? 0 : _round(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;\n          !suppressEvents && this.parent && _callback(this, \"onRepeat\");\n          this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);\n\n          if (prevTime !== this._time || prevPaused !== !this._ts) {\n            return this;\n          }\n\n          dur = this._dur; // in case the duration changed in the onRepeat\n\n          tDur = this._tDur;\n\n          if (doesWrap) {\n            this._lock = 2;\n            prevTime = rewinding ? dur : -0.0001;\n            this.render(prevTime, true);\n            this.vars.repeatRefresh && !isYoyo && this.invalidate();\n          }\n\n          this._lock = 0;\n\n          if (!this._ts && !prevPaused) {\n            return this;\n          } //in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.\n\n\n          _propagateYoyoEase(this, isYoyo);\n        }\n      }\n\n      if (this._hasPause && !this._forcing && this._lock < 2) {\n        pauseTween = _findNextPauseTween(this, _round(prevTime), _round(time));\n\n        if (pauseTween) {\n          tTime -= time - (time = pauseTween._start);\n        }\n      }\n\n      this._tTime = tTime;\n      this._time = time;\n      this._act = !timeScale; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.\n\n      if (!this._initted) {\n        this._onUpdate = this.vars.onUpdate;\n        this._initted = 1;\n        this._zTime = totalTime;\n        prevTime = 0; // upon init, the playhead should always go forward; someone could invalidate() a completed timeline and then if they restart(), that would make child tweens render in reverse order which could lock in the wrong starting values if they build on each other, like tl.to(obj, {x: 100}).to(obj, {x: 0}).\n      }\n\n      !prevTime && (time || !dur && totalTime >= 0) && !suppressEvents && _callback(this, \"onStart\");\n\n      if (time >= prevTime && totalTime >= 0) {\n        child = this._first;\n\n        while (child) {\n          next = child._next;\n\n          if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {\n            if (child.parent !== this) {\n              // an extreme edge case - the child's render could do something like kill() the \"next\" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.\n              return this.render(totalTime, suppressEvents, force);\n            }\n\n            child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);\n\n            if (time !== this._time || !this._ts && !prevPaused) {\n              //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete\n              pauseTween = 0;\n              next && (tTime += this._zTime = -_tinyNum); // it didn't finish rendering, so flag zTime as negative so that so that the next time render() is called it'll be forced (to render any remaining children)\n\n              break;\n            }\n          }\n\n          child = next;\n        }\n      } else {\n        child = this._last;\n        var adjustedTime = totalTime < 0 ? totalTime : time; //when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.\n\n        while (child) {\n          next = child._prev;\n\n          if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {\n            if (child.parent !== this) {\n              // an extreme edge case - the child's render could do something like kill() the \"next\" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.\n              return this.render(totalTime, suppressEvents, force);\n            }\n\n            child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force);\n\n            if (time !== this._time || !this._ts && !prevPaused) {\n              //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete\n              pauseTween = 0;\n              next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum); // it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)\n\n              break;\n            }\n          }\n\n          child = next;\n        }\n      }\n\n      if (pauseTween && !suppressEvents) {\n        this.pause();\n        pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;\n\n        if (this._ts) {\n          //the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).\n          this._start = prevStart; //if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.\n\n          _setEnd(this);\n\n          return this.render(totalTime, suppressEvents, force);\n        }\n      }\n\n      this._onUpdate && !suppressEvents && _callback(this, \"onUpdate\", true);\n      if (tTime === tDur && tDur >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {\n        (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.\n\n        if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime)) {\n          _callback(this, tTime === tDur ? \"onComplete\" : \"onReverseComplete\", true);\n\n          this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();\n        }\n      }\n    }\n\n    return this;\n  };\n\n  _proto2.add = function add(child, position) {\n    var _this2 = this;\n\n    _isNumber(position) || (position = _parsePosition(this, position));\n\n    if (!(child instanceof Animation)) {\n      if (_isArray(child)) {\n        child.forEach(function (obj) {\n          return _this2.add(obj, position);\n        });\n        return this;\n      }\n\n      if (_isString(child)) {\n        return this.addLabel(child, position);\n      }\n\n      if (_isFunction(child)) {\n        child = Tween.delayedCall(0, child);\n      } else {\n        return this;\n      }\n    }\n\n    return this !== child ? _addToTimeline(this, child, position) : this; //don't allow a timeline to be added to itself as a child!\n  };\n\n  _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {\n    if (nested === void 0) {\n      nested = true;\n    }\n\n    if (tweens === void 0) {\n      tweens = true;\n    }\n\n    if (timelines === void 0) {\n      timelines = true;\n    }\n\n    if (ignoreBeforeTime === void 0) {\n      ignoreBeforeTime = -_bigNum;\n    }\n\n    var a = [],\n        child = this._first;\n\n    while (child) {\n      if (child._start >= ignoreBeforeTime) {\n        if (child instanceof Tween) {\n          tweens && a.push(child);\n        } else {\n          timelines && a.push(child);\n          nested && a.push.apply(a, child.getChildren(true, tweens, timelines));\n        }\n      }\n\n      child = child._next;\n    }\n\n    return a;\n  };\n\n  _proto2.getById = function getById(id) {\n    var animations = this.getChildren(1, 1, 1),\n        i = animations.length;\n\n    while (i--) {\n      if (animations[i].vars.id === id) {\n        return animations[i];\n      }\n    }\n  };\n\n  _proto2.remove = function remove(child) {\n    if (_isString(child)) {\n      return this.removeLabel(child);\n    }\n\n    if (_isFunction(child)) {\n      return this.killTweensOf(child);\n    }\n\n    _removeLinkedListItem(this, child);\n\n    if (child === this._recent) {\n      this._recent = this._last;\n    }\n\n    return _uncache(this);\n  };\n\n  _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {\n    if (!arguments.length) {\n      return this._tTime;\n    }\n\n    this._forcing = 1;\n\n    if (!this._dp && this._ts) {\n      //special case for the global timeline (or any other that has no parent or detached parent).\n      this._start = _round(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));\n    }\n\n    _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);\n\n    this._forcing = 0;\n    return this;\n  };\n\n  _proto2.addLabel = function addLabel(label, position) {\n    this.labels[label] = _parsePosition(this, position);\n    return this;\n  };\n\n  _proto2.removeLabel = function removeLabel(label) {\n    delete this.labels[label];\n    return this;\n  };\n\n  _proto2.addPause = function addPause(position, callback, params) {\n    var t = Tween.delayedCall(0, callback || _emptyFunc, params);\n    t.data = \"isPause\";\n    this._hasPause = 1;\n    return _addToTimeline(this, t, _parsePosition(this, position));\n  };\n\n  _proto2.removePause = function removePause(position) {\n    var child = this._first;\n    position = _parsePosition(this, position);\n\n    while (child) {\n      if (child._start === position && child.data === \"isPause\") {\n        _removeFromParent(child);\n      }\n\n      child = child._next;\n    }\n  };\n\n  _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {\n    var tweens = this.getTweensOf(targets, onlyActive),\n        i = tweens.length;\n\n    while (i--) {\n      _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);\n    }\n\n    return this;\n  };\n\n  _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {\n    var a = [],\n        parsedTargets = toArray(targets),\n        child = this._first,\n        isGlobalTime = _isNumber(onlyActive),\n        // a number is interpreted as a global time. If the animation spans\n    children;\n\n    while (child) {\n      if (child instanceof Tween) {\n        if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {\n          // note: if this is for overwriting, it should only be for tweens that aren't paused and are initted.\n          a.push(child);\n        }\n      } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {\n        a.push.apply(a, children);\n      }\n\n      child = child._next;\n    }\n\n    return a;\n  } // potential future feature - targets() on timelines\n  // targets() {\n  // \tlet result = [];\n  // \tthis.getChildren(true, true, false).forEach(t => result.push(...t.targets()));\n  // \treturn result;\n  // }\n  ;\n\n  _proto2.tweenTo = function tweenTo(position, vars) {\n    vars = vars || {};\n\n    var tl = this,\n        endTime = _parsePosition(tl, position),\n        _vars = vars,\n        startAt = _vars.startAt,\n        _onStart = _vars.onStart,\n        onStartParams = _vars.onStartParams,\n        immediateRender = _vars.immediateRender,\n        tween = Tween.to(tl, _setDefaults({\n      ease: \"none\",\n      lazy: false,\n      immediateRender: false,\n      time: endTime,\n      overwrite: \"auto\",\n      duration: vars.duration || Math.abs((endTime - (startAt && \"time\" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,\n      onStart: function onStart() {\n        tl.pause();\n        var duration = vars.duration || Math.abs((endTime - tl._time) / tl.timeScale());\n        tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);\n        _onStart && _onStart.apply(tween, onStartParams || []); //in case the user had an onStart in the vars - we don't want to overwrite it.\n      }\n    }, vars));\n\n    return immediateRender ? tween.render(0) : tween;\n  };\n\n  _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {\n    return this.tweenTo(toPosition, _setDefaults({\n      startAt: {\n        time: _parsePosition(this, fromPosition)\n      }\n    }, vars));\n  };\n\n  _proto2.recent = function recent() {\n    return this._recent;\n  };\n\n  _proto2.nextLabel = function nextLabel(afterTime) {\n    if (afterTime === void 0) {\n      afterTime = this._time;\n    }\n\n    return _getLabelInDirection(this, _parsePosition(this, afterTime));\n  };\n\n  _proto2.previousLabel = function previousLabel(beforeTime) {\n    if (beforeTime === void 0) {\n      beforeTime = this._time;\n    }\n\n    return _getLabelInDirection(this, _parsePosition(this, beforeTime), 1);\n  };\n\n  _proto2.currentLabel = function currentLabel(value) {\n    return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);\n  };\n\n  _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {\n    if (ignoreBeforeTime === void 0) {\n      ignoreBeforeTime = 0;\n    }\n\n    var child = this._first,\n        labels = this.labels,\n        p;\n\n    while (child) {\n      if (child._start >= ignoreBeforeTime) {\n        child._start += amount;\n        child._end += amount;\n      }\n\n      child = child._next;\n    }\n\n    if (adjustLabels) {\n      for (p in labels) {\n        if (labels[p] >= ignoreBeforeTime) {\n          labels[p] += amount;\n        }\n      }\n    }\n\n    return _uncache(this);\n  };\n\n  _proto2.invalidate = function invalidate() {\n    var child = this._first;\n    this._lock = 0;\n\n    while (child) {\n      child.invalidate();\n      child = child._next;\n    }\n\n    return _Animation.prototype.invalidate.call(this);\n  };\n\n  _proto2.clear = function clear(includeLabels) {\n    if (includeLabels === void 0) {\n      includeLabels = true;\n    }\n\n    var child = this._first,\n        next;\n\n    while (child) {\n      next = child._next;\n      this.remove(child);\n      child = next;\n    }\n\n    this._dp && (this._time = this._tTime = this._pTime = 0);\n    includeLabels && (this.labels = {});\n    return _uncache(this);\n  };\n\n  _proto2.totalDuration = function totalDuration(value) {\n    var max = 0,\n        self = this,\n        child = self._last,\n        prevStart = _bigNum,\n        prev,\n        start,\n        parent;\n\n    if (arguments.length) {\n      return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));\n    }\n\n    if (self._dirty) {\n      parent = self.parent;\n\n      while (child) {\n        prev = child._prev; //record it here in case the tween changes position in the sequence...\n\n        child._dirty && child.totalDuration(); //could change the tween._startTime, so make sure the animation's cache is clean before analyzing it.\n\n        start = child._start;\n\n        if (start > prevStart && self._sort && child._ts && !self._lock) {\n          //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence\n          self._lock = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().\n\n          _addToTimeline(self, child, start - child._delay, 1)._lock = 0;\n        } else {\n          prevStart = start;\n        }\n\n        if (start < 0 && child._ts) {\n          //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.\n          max -= start;\n\n          if (!parent && !self._dp || parent && parent.smoothChildTiming) {\n            self._start += start / self._ts;\n            self._time -= start;\n            self._tTime -= start;\n          }\n\n          self.shiftChildren(-start, false, -1e999);\n          prevStart = 0;\n        }\n\n        child._end > max && child._ts && (max = child._end);\n        child = prev;\n      }\n\n      _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);\n\n      self._dirty = 0;\n    }\n\n    return self._tDur;\n  };\n\n  Timeline.updateRoot = function updateRoot(time) {\n    if (_globalTimeline._ts) {\n      _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));\n\n      _lastRenderedFrame = _ticker.frame;\n    }\n\n    if (_ticker.frame >= _nextGCFrame) {\n      _nextGCFrame += _config.autoSleep || 120;\n      var child = _globalTimeline._first;\n      if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {\n        while (child && !child._ts) {\n          child = child._next;\n        }\n\n        child || _ticker.sleep();\n      }\n    }\n  };\n\n  return Timeline;\n}(Animation);\n\n_setDefaults(Timeline.prototype, {\n  _lock: 0,\n  _hasPause: 0,\n  _forcing: 0\n});\n\nvar _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {\n  //note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus \"this\" would refer to the plugin.\n  var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),\n      index = 0,\n      matchIndex = 0,\n      result,\n      startNums,\n      color,\n      endNum,\n      chunk,\n      startNum,\n      hasRandom,\n      a;\n  pt.b = start;\n  pt.e = end;\n  start += \"\"; //ensure values are strings\n\n  end += \"\";\n\n  if (hasRandom = ~end.indexOf(\"random(\")) {\n    end = _replaceRandom(end);\n  }\n\n  if (stringFilter) {\n    a = [start, end];\n    stringFilter(a, target, prop); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.\n\n    start = a[0];\n    end = a[1];\n  }\n\n  startNums = start.match(_complexStringNumExp) || [];\n\n  while (result = _complexStringNumExp.exec(end)) {\n    endNum = result[0];\n    chunk = end.substring(index, result.index);\n\n    if (color) {\n      color = (color + 1) % 5;\n    } else if (chunk.substr(-5) === \"rgba(\") {\n      color = 1;\n    }\n\n    if (endNum !== startNums[matchIndex++]) {\n      startNum = parseFloat(startNums[matchIndex - 1]) || 0; //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.\n\n      pt._pt = {\n        _next: pt._pt,\n        p: chunk || matchIndex === 1 ? chunk : \",\",\n        //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.\n        s: startNum,\n        c: endNum.charAt(1) === \"=\" ? parseFloat(endNum.substr(2)) * (endNum.charAt(0) === \"-\" ? -1 : 1) : parseFloat(endNum) - startNum,\n        m: color && color < 4 ? Math.round : 0\n      };\n      index = _complexStringNumExp.lastIndex;\n    }\n  }\n\n  pt.c = index < end.length ? end.substring(index, end.length) : \"\"; //we use the \"c\" of the PropTween to store the final part of the string (after the last number)\n\n  pt.fp = funcParam;\n\n  if (_relExp.test(end) || hasRandom) {\n    pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).\n  }\n\n  this._pt = pt; //start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus \"this\" would refer to the plugin.\n\n  return pt;\n},\n    _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam) {\n  _isFunction(end) && (end = end(index || 0, target, targets));\n  var currentValue = target[prop],\n      parsedStart = start !== \"get\" ? start : !_isFunction(currentValue) ? currentValue : funcParam ? target[prop.indexOf(\"set\") || !_isFunction(target[\"get\" + prop.substr(3)]) ? prop : \"get\" + prop.substr(3)](funcParam) : target[prop](),\n      setter = !_isFunction(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,\n      pt;\n\n  if (_isString(end)) {\n    if (~end.indexOf(\"random(\")) {\n      end = _replaceRandom(end);\n    }\n\n    if (end.charAt(1) === \"=\") {\n      end = parseFloat(parsedStart) + parseFloat(end.substr(2)) * (end.charAt(0) === \"-\" ? -1 : 1) + (getUnit(parsedStart) || 0);\n    }\n  }\n\n  if (parsedStart !== end) {\n    if (!isNaN(parsedStart * end)) {\n      pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === \"boolean\" ? _renderBoolean : _renderPlain, 0, setter);\n      funcParam && (pt.fp = funcParam);\n      modifier && pt.modifier(modifier, this, target);\n      return this._pt = pt;\n    }\n\n    !currentValue && !(prop in target) && _missingPlugin(prop, end);\n    return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);\n  }\n},\n    //creates a copy of the vars object and processes any function-based values (putting the resulting values directly into the copy) as well as strings with \"random()\" in them. It does NOT process relative values.\n_processVars = function _processVars(vars, index, target, targets, tween) {\n  _isFunction(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));\n\n  if (!_isObject(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {\n    return _isString(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;\n  }\n\n  var copy = {},\n      p;\n\n  for (p in vars) {\n    copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);\n  }\n\n  return copy;\n},\n    _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {\n  var plugin, pt, ptLookup, i;\n\n  if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {\n    tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);\n\n    if (tween !== _quickTween) {\n      ptLookup = tween._ptLookup[tween._targets.indexOf(target)]; //note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.\n\n      i = plugin._props.length;\n\n      while (i--) {\n        ptLookup[plugin._props[i]] = pt;\n      }\n    }\n  }\n\n  return plugin;\n},\n    _overwritingTween,\n    //store a reference temporarily so we can avoid overwriting itself.\n_initTween = function _initTween(tween, time) {\n  var vars = tween.vars,\n      ease = vars.ease,\n      startAt = vars.startAt,\n      immediateRender = vars.immediateRender,\n      lazy = vars.lazy,\n      onUpdate = vars.onUpdate,\n      onUpdateParams = vars.onUpdateParams,\n      callbackScope = vars.callbackScope,\n      runBackwards = vars.runBackwards,\n      yoyoEase = vars.yoyoEase,\n      keyframes = vars.keyframes,\n      autoRevert = vars.autoRevert,\n      dur = tween._dur,\n      prevStartAt = tween._startAt,\n      targets = tween._targets,\n      parent = tween.parent,\n      fullTargets = parent && parent.data === \"nested\" ? parent.parent._targets : targets,\n      autoOverwrite = tween._overwrite === \"auto\" && !_suppressOverwrites,\n      tl = tween.timeline,\n      cleanVars,\n      i,\n      p,\n      pt,\n      target,\n      hasPriority,\n      gsData,\n      harness,\n      plugin,\n      ptLookup,\n      index,\n      harnessVars,\n      overwritten;\n  tl && (!keyframes || !ease) && (ease = \"none\");\n  tween._ease = _parseEase(ease, _defaults.ease);\n  tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults.ease)) : 0;\n\n  if (yoyoEase && tween._yoyo && !tween._repeat) {\n    //there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.\n    yoyoEase = tween._yEase;\n    tween._yEase = tween._ease;\n    tween._ease = yoyoEase;\n  }\n\n  if (!tl) {\n    //if there's an internal timeline, skip all the parsing because we passed that task down the chain.\n    harness = targets[0] ? _getCache(targets[0]).harness : 0;\n    harnessVars = harness && vars[harness.prop]; //someone may need to specify CSS-specific values AND non-CSS values, like if the element has an \"x\" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.\n\n    cleanVars = _copyExcluding(vars, _reservedProps);\n    prevStartAt && prevStartAt.render(-1, true).kill();\n\n    if (startAt) {\n      _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults({\n        data: \"isStart\",\n        overwrite: false,\n        parent: parent,\n        immediateRender: true,\n        lazy: _isNotFalse(lazy),\n        startAt: null,\n        delay: 0,\n        onUpdate: onUpdate,\n        onUpdateParams: onUpdateParams,\n        callbackScope: callbackScope,\n        stagger: 0\n      }, startAt))); //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);\n\n\n      if (immediateRender) {\n        if (time > 0) {\n          autoRevert || (tween._startAt = 0); //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in Timeline instances where immediateRender was false or when autoRevert is explicitly set to true.\n        } else if (dur && !(time < 0 && prevStartAt)) {\n          time && (tween._zTime = time);\n          return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.\n        }\n      }\n    } else if (runBackwards && dur) {\n      //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)\n      if (prevStartAt) {\n        !autoRevert && (tween._startAt = 0);\n      } else {\n        time && (immediateRender = false); //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0\n\n        p = _setDefaults({\n          overwrite: false,\n          data: \"isFromStart\",\n          //we tag the tween with as \"isFromStart\" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a \"from()\" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:\"height\", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.\n          lazy: immediateRender && _isNotFalse(lazy),\n          immediateRender: immediateRender,\n          //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)\n          stagger: 0,\n          parent: parent //ensures that nested tweens that had a stagger are handled properly, like gsap.from(\".class\", {y:gsap.utils.wrap([-100,100])})\n\n        }, cleanVars);\n        harnessVars && (p[harness.prop] = harnessVars); // in case someone does something like .from(..., {css:{}})\n\n        _removeFromParent(tween._startAt = Tween.set(targets, p));\n\n        if (!immediateRender) {\n          _initTween(tween._startAt, _tinyNum); //ensures that the initial values are recorded\n\n        } else if (!time) {\n          return;\n        }\n      }\n    }\n\n    tween._pt = 0;\n    lazy = dur && _isNotFalse(lazy) || lazy && !dur;\n\n    for (i = 0; i < targets.length; i++) {\n      target = targets[i];\n      gsData = target._gsap || _harness(targets)[i]._gsap;\n      tween._ptLookup[i] = ptLookup = {};\n      _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)\n\n      index = fullTargets === targets ? i : fullTargets.indexOf(target);\n\n      if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {\n        tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);\n\n        plugin._props.forEach(function (name) {\n          ptLookup[name] = pt;\n        });\n\n        plugin.priority && (hasPriority = 1);\n      }\n\n      if (!harness || harnessVars) {\n        for (p in cleanVars) {\n          if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {\n            plugin.priority && (hasPriority = 1);\n          } else {\n            ptLookup[p] = pt = _addPropTween.call(tween, target, p, \"get\", cleanVars[p], index, fullTargets, 0, vars.stringFilter);\n          }\n        }\n      }\n\n      tween._op && tween._op[i] && tween.kill(target, tween._op[i]);\n\n      if (autoOverwrite && tween._pt) {\n        _overwritingTween = tween;\n\n        _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(0)); //Also make sure the overwriting doesn't overwrite THIS tween!!!\n\n\n        overwritten = !tween.parent;\n        _overwritingTween = 0;\n      }\n\n      tween._pt && lazy && (_lazyLookup[gsData.id] = 1);\n    }\n\n    hasPriority && _sortPropTweensByPriority(tween);\n    tween._onInit && tween._onInit(tween); //plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.\n  }\n\n  tween._from = !tl && !!vars.runBackwards; //nested timelines should never run backwards - the backwards-ness is in the child tweens.\n\n  tween._onUpdate = onUpdate;\n  tween._initted = (!tween._op || tween._pt) && !overwritten; // if overwrittenProps resulted in the entire tween being killed, do NOT flag it as initted or else it may render for one tick.\n},\n    _addAliasesToVars = function _addAliasesToVars(targets, vars) {\n  var harness = targets[0] ? _getCache(targets[0]).harness : 0,\n      propertyAliases = harness && harness.aliases,\n      copy,\n      p,\n      i,\n      aliases;\n\n  if (!propertyAliases) {\n    return vars;\n  }\n\n  copy = _merge({}, vars);\n\n  for (p in propertyAliases) {\n    if (p in copy) {\n      aliases = propertyAliases[p].split(\",\");\n      i = aliases.length;\n\n      while (i--) {\n        copy[aliases[i]] = copy[p];\n      }\n    }\n  }\n\n  return copy;\n},\n    _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {\n  return _isFunction(value) ? value.call(tween, i, target, targets) : _isString(value) && ~value.indexOf(\"random(\") ? _replaceRandom(value) : value;\n},\n    _staggerTweenProps = _callbackNames + \"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase\",\n    _staggerPropsToSkip = (_staggerTweenProps + \",id,stagger,delay,duration,paused,scrollTrigger\").split(\",\");\n/*\n * --------------------------------------------------------------------------------------\n * TWEEN\n * --------------------------------------------------------------------------------------\n */\n\n\nexport var Tween = /*#__PURE__*/function (_Animation2) {\n  _inheritsLoose(Tween, _Animation2);\n\n  function Tween(targets, vars, time, skipInherit) {\n    var _this3;\n\n    if (typeof vars === \"number\") {\n      time.duration = vars;\n      vars = time;\n      time = null;\n    }\n\n    _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars), time) || this;\n    var _this3$vars = _this3.vars,\n        duration = _this3$vars.duration,\n        delay = _this3$vars.delay,\n        immediateRender = _this3$vars.immediateRender,\n        stagger = _this3$vars.stagger,\n        overwrite = _this3$vars.overwrite,\n        keyframes = _this3$vars.keyframes,\n        defaults = _this3$vars.defaults,\n        scrollTrigger = _this3$vars.scrollTrigger,\n        yoyoEase = _this3$vars.yoyoEase,\n        parent = _this3.parent,\n        parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber(targets[0]) : \"length\" in vars) ? [targets] : toArray(targets),\n        tl,\n        i,\n        copy,\n        l,\n        p,\n        curTarget,\n        staggerFunc,\n        staggerVarsToMerge;\n    _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn(\"GSAP target \" + targets + \" not found. https://greensock.com\", !_config.nullTargetWarn) || [];\n    _this3._ptLookup = []; //PropTween lookup. An array containing an object for each target, having keys for each tweening property\n\n    _this3._overwrite = overwrite;\n\n    if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {\n      vars = _this3.vars;\n      tl = _this3.timeline = new Timeline({\n        data: \"nested\",\n        defaults: defaults || {}\n      });\n      tl.kill();\n      tl.parent = tl._dp = _assertThisInitialized(_this3);\n      tl._start = 0;\n\n      if (keyframes) {\n        _setDefaults(tl.vars.defaults, {\n          ease: \"none\"\n        });\n\n        keyframes.forEach(function (frame) {\n          return tl.to(parsedTargets, frame, \">\");\n        });\n      } else {\n        l = parsedTargets.length;\n        staggerFunc = stagger ? distribute(stagger) : _emptyFunc;\n\n        if (_isObject(stagger)) {\n          //users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.\n          for (p in stagger) {\n            if (~_staggerTweenProps.indexOf(p)) {\n              staggerVarsToMerge || (staggerVarsToMerge = {});\n              staggerVarsToMerge[p] = stagger[p];\n            }\n          }\n        }\n\n        for (i = 0; i < l; i++) {\n          copy = {};\n\n          for (p in vars) {\n            if (_staggerPropsToSkip.indexOf(p) < 0) {\n              copy[p] = vars[p];\n            }\n          }\n\n          copy.stagger = 0;\n          yoyoEase && (copy.yoyoEase = yoyoEase);\n          staggerVarsToMerge && _merge(copy, staggerVarsToMerge);\n          curTarget = parsedTargets[i]; //don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.\n\n          copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);\n          copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;\n\n          if (!stagger && l === 1 && copy.delay) {\n            // if someone does delay:\"random(1, 5)\", repeat:-1, for example, the delay shouldn't be inside the repeat.\n            _this3._delay = delay = copy.delay;\n            _this3._start += delay;\n            copy.delay = 0;\n          }\n\n          tl.to(curTarget, copy, staggerFunc(i, curTarget, parsedTargets));\n        }\n\n        tl.duration() ? duration = delay = 0 : _this3.timeline = 0; // if the timeline's duration is 0, we don't need a timeline internally!\n      }\n\n      duration || _this3.duration(duration = tl.duration());\n    } else {\n      _this3.timeline = 0; //speed optimization, faster lookups (no going up the prototype chain)\n    }\n\n    if (overwrite === true && !_suppressOverwrites) {\n      _overwritingTween = _assertThisInitialized(_this3);\n\n      _globalTimeline.killTweensOf(parsedTargets);\n\n      _overwritingTween = 0;\n    }\n\n    parent && _postAddChecks(parent, _assertThisInitialized(_this3));\n\n    if (immediateRender || !duration && !keyframes && _this3._start === _round(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== \"nested\") {\n      _this3._tTime = -_tinyNum; //forces a render without having to set the render() \"force\" parameter to true because we want to allow lazying by default (using the \"force\" parameter always forces an immediate full render)\n\n      _this3.render(Math.max(0, -delay)); //in case delay is negative\n\n    }\n\n    scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);\n    return _this3;\n  }\n\n  var _proto3 = Tween.prototype;\n\n  _proto3.render = function render(totalTime, suppressEvents, force) {\n    var prevTime = this._time,\n        tDur = this._tDur,\n        dur = this._dur,\n        tTime = totalTime > tDur - _tinyNum && totalTime >= 0 ? tDur : totalTime < _tinyNum ? 0 : totalTime,\n        time,\n        pt,\n        iteration,\n        cycleDuration,\n        prevIteration,\n        isYoyo,\n        ratio,\n        timeline,\n        yoyoEase;\n\n    if (!dur) {\n      _renderZeroDurationTween(this, totalTime, suppressEvents, force);\n    } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== totalTime < 0) {\n      //this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)\n      time = tTime;\n      timeline = this.timeline;\n\n      if (this._repeat) {\n        //adjust the time for repeats and yoyos\n        cycleDuration = dur + this._rDelay;\n\n        if (this._repeat < -1 && totalTime < 0) {\n          return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);\n        }\n\n        time = _round(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)\n\n        if (tTime === tDur) {\n          // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)\n          iteration = this._repeat;\n          time = dur;\n        } else {\n          iteration = ~~(tTime / cycleDuration);\n\n          if (iteration && iteration === tTime / cycleDuration) {\n            time = dur;\n            iteration--;\n          }\n\n          time > dur && (time = dur);\n        }\n\n        isYoyo = this._yoyo && iteration & 1;\n\n        if (isYoyo) {\n          yoyoEase = this._yEase;\n          time = dur - time;\n        }\n\n        prevIteration = _animationCycle(this._tTime, cycleDuration);\n\n        if (time === prevTime && !force && this._initted) {\n          //could be during the repeatDelay part. No need to render and fire callbacks.\n          return this;\n        }\n\n        if (iteration !== prevIteration) {\n          timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo); //repeatRefresh functionality\n\n          if (this.vars.repeatRefresh && !isYoyo && !this._lock) {\n            this._lock = force = 1; //force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.\n\n            this.render(_round(cycleDuration * iteration), true).invalidate()._lock = 0;\n          }\n        }\n      }\n\n      if (!this._initted) {\n        if (_attemptInitTween(this, totalTime < 0 ? totalTime : time, force, suppressEvents)) {\n          this._tTime = 0; // in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.\n\n          return this;\n        }\n\n        if (dur !== this._dur) {\n          // while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.\n          return this.render(totalTime, suppressEvents, force);\n        }\n      }\n\n      this._tTime = tTime;\n      this._time = time;\n\n      if (!this._act && this._ts) {\n        this._act = 1; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.\n\n        this._lazy = 0;\n      }\n\n      this.ratio = ratio = (yoyoEase || this._ease)(time / dur);\n\n      if (this._from) {\n        this.ratio = ratio = 1 - ratio;\n      }\n\n      time && !prevTime && !suppressEvents && _callback(this, \"onStart\");\n      pt = this._pt;\n\n      while (pt) {\n        pt.r(ratio, pt.d);\n        pt = pt._next;\n      }\n\n      timeline && timeline.render(totalTime < 0 ? totalTime : !time && isYoyo ? -_tinyNum : timeline._dur * ratio, suppressEvents, force) || this._startAt && (this._zTime = totalTime);\n\n      if (this._onUpdate && !suppressEvents) {\n        totalTime < 0 && this._startAt && this._startAt.render(totalTime, true, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.\n\n        _callback(this, \"onUpdate\");\n      }\n\n      this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback(this, \"onRepeat\");\n\n      if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {\n        totalTime < 0 && this._startAt && !this._onUpdate && this._startAt.render(totalTime, true, true);\n        (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.\n\n        if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime)) {\n          // if prevTime and tTime are zero, we shouldn't fire the onReverseComplete. This could happen if you gsap.to(... {paused:true}).play();\n          _callback(this, tTime === tDur ? \"onComplete\" : \"onReverseComplete\", true);\n\n          this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();\n        }\n      }\n    }\n\n    return this;\n  };\n\n  _proto3.targets = function targets() {\n    return this._targets;\n  };\n\n  _proto3.invalidate = function invalidate() {\n    this._pt = this._op = this._startAt = this._onUpdate = this._lazy = this.ratio = 0;\n    this._ptLookup = [];\n    this.timeline && this.timeline.invalidate();\n    return _Animation2.prototype.invalidate.call(this);\n  };\n\n  _proto3.kill = function kill(targets, vars) {\n    if (vars === void 0) {\n      vars = \"all\";\n    }\n\n    if (!targets && (!vars || vars === \"all\")) {\n      this._lazy = this._pt = 0;\n      return this.parent ? _interrupt(this) : this;\n    }\n\n    if (this.timeline) {\n      var tDur = this.timeline.totalDuration();\n      this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this); // if nothing is left tweening, interrupt.\n\n      this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1); // if a nested tween is killed that changes the duration, it should affect this tween's duration. We must use the ratio, though, because sometimes the internal timeline is stretched like for keyframes where they don't all add up to whatever the parent tween's duration was set to.\n\n      return this;\n    }\n\n    var parsedTargets = this._targets,\n        killingTargets = targets ? toArray(targets) : parsedTargets,\n        propTweenLookup = this._ptLookup,\n        firstPT = this._pt,\n        overwrittenProps,\n        curLookup,\n        curOverwriteProps,\n        props,\n        p,\n        pt,\n        i;\n\n    if ((!vars || vars === \"all\") && _arraysMatch(parsedTargets, killingTargets)) {\n      vars === \"all\" && (this._pt = 0);\n      return _interrupt(this);\n    }\n\n    overwrittenProps = this._op = this._op || [];\n\n    if (vars !== \"all\") {\n      //so people can pass in a comma-delimited list of property names\n      if (_isString(vars)) {\n        p = {};\n\n        _forEachName(vars, function (name) {\n          return p[name] = 1;\n        });\n\n        vars = p;\n      }\n\n      vars = _addAliasesToVars(parsedTargets, vars);\n    }\n\n    i = parsedTargets.length;\n\n    while (i--) {\n      if (~killingTargets.indexOf(parsedTargets[i])) {\n        curLookup = propTweenLookup[i];\n\n        if (vars === \"all\") {\n          overwrittenProps[i] = vars;\n          props = curLookup;\n          curOverwriteProps = {};\n        } else {\n          curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};\n          props = vars;\n        }\n\n        for (p in props) {\n          pt = curLookup && curLookup[p];\n\n          if (pt) {\n            if (!(\"kill\" in pt.d) || pt.d.kill(p) === true) {\n              _removeLinkedListItem(this, pt, \"_pt\");\n            }\n\n            delete curLookup[p];\n          }\n\n          if (curOverwriteProps !== \"all\") {\n            curOverwriteProps[p] = 1;\n          }\n        }\n      }\n    }\n\n    this._initted && !this._pt && firstPT && _interrupt(this); //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.\n\n    return this;\n  };\n\n  Tween.to = function to(targets, vars) {\n    return new Tween(targets, vars, arguments[2]);\n  };\n\n  Tween.from = function from(targets, vars) {\n    return new Tween(targets, _parseVars(arguments, 1));\n  };\n\n  Tween.delayedCall = function delayedCall(delay, callback, params, scope) {\n    return new Tween(callback, 0, {\n      immediateRender: false,\n      lazy: false,\n      overwrite: false,\n      delay: delay,\n      onComplete: callback,\n      onReverseComplete: callback,\n      onCompleteParams: params,\n      onReverseCompleteParams: params,\n      callbackScope: scope\n    });\n  };\n\n  Tween.fromTo = function fromTo(targets, fromVars, toVars) {\n    return new Tween(targets, _parseVars(arguments, 2));\n  };\n\n  Tween.set = function set(targets, vars) {\n    vars.duration = 0;\n    vars.repeatDelay || (vars.repeat = 0);\n    return new Tween(targets, vars);\n  };\n\n  Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {\n    return _globalTimeline.killTweensOf(targets, props, onlyActive);\n  };\n\n  return Tween;\n}(Animation);\n\n_setDefaults(Tween.prototype, {\n  _targets: [],\n  _lazy: 0,\n  _startAt: 0,\n  _op: 0,\n  _onInit: 0\n}); //add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)\n// _forEachName(\"to,from,fromTo,set,call,add,addLabel,addPause\", name => {\n// \tTween.prototype[name] = function() {\n// \t\tlet tl = new Timeline();\n// \t\treturn _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));\n// \t}\n// });\n//for backward compatibility. Leverage the timeline calls.\n\n\n_forEachName(\"staggerTo,staggerFrom,staggerFromTo\", function (name) {\n  Tween[name] = function () {\n    var tl = new Timeline(),\n        params = _slice.call(arguments, 0);\n\n    params.splice(name === \"staggerFromTo\" ? 5 : 4, 0, 0);\n    return tl[name].apply(tl, params);\n  };\n});\n/*\n * --------------------------------------------------------------------------------------\n * PROPTWEEN\n * --------------------------------------------------------------------------------------\n */\n\n\nvar _setterPlain = function _setterPlain(target, property, value) {\n  return target[property] = value;\n},\n    _setterFunc = function _setterFunc(target, property, value) {\n  return target[property](value);\n},\n    _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {\n  return target[property](data.fp, value);\n},\n    _setterAttribute = function _setterAttribute(target, property, value) {\n  return target.setAttribute(property, value);\n},\n    _getSetter = function _getSetter(target, property) {\n  return _isFunction(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;\n},\n    _renderPlain = function _renderPlain(ratio, data) {\n  return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000, data);\n},\n    _renderBoolean = function _renderBoolean(ratio, data) {\n  return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);\n},\n    _renderComplexString = function _renderComplexString(ratio, data) {\n  var pt = data._pt,\n      s = \"\";\n\n  if (!ratio && data.b) {\n    //b = beginning string\n    s = data.b;\n  } else if (ratio === 1 && data.e) {\n    //e = ending string\n    s = data.e;\n  } else {\n    while (pt) {\n      s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s; //we use the \"p\" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.\n\n      pt = pt._next;\n    }\n\n    s += data.c; //we use the \"c\" of the PropTween to store the final chunk of non-numeric text.\n  }\n\n  data.set(data.t, data.p, s, data);\n},\n    _renderPropTweens = function _renderPropTweens(ratio, data) {\n  var pt = data._pt;\n\n  while (pt) {\n    pt.r(ratio, pt.d);\n    pt = pt._next;\n  }\n},\n    _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {\n  var pt = this._pt,\n      next;\n\n  while (pt) {\n    next = pt._next;\n    pt.p === property && pt.modifier(modifier, tween, target);\n    pt = next;\n  }\n},\n    _killPropTweensOf = function _killPropTweensOf(property) {\n  var pt = this._pt,\n      hasNonDependentRemaining,\n      next;\n\n  while (pt) {\n    next = pt._next;\n\n    if (pt.p === property && !pt.op || pt.op === property) {\n      _removeLinkedListItem(this, pt, \"_pt\");\n    } else if (!pt.dep) {\n      hasNonDependentRemaining = 1;\n    }\n\n    pt = next;\n  }\n\n  return !hasNonDependentRemaining;\n},\n    _setterWithModifier = function _setterWithModifier(target, property, value, data) {\n  data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);\n},\n    _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {\n  var pt = parent._pt,\n      next,\n      pt2,\n      first,\n      last; //sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)\n\n  while (pt) {\n    next = pt._next;\n    pt2 = first;\n\n    while (pt2 && pt2.pr > pt.pr) {\n      pt2 = pt2._next;\n    }\n\n    if (pt._prev = pt2 ? pt2._prev : last) {\n      pt._prev._next = pt;\n    } else {\n      first = pt;\n    }\n\n    if (pt._next = pt2) {\n      pt2._prev = pt;\n    } else {\n      last = pt;\n    }\n\n    pt = next;\n  }\n\n  parent._pt = first;\n}; //PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)\n\n\nexport var PropTween = /*#__PURE__*/function () {\n  function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {\n    this.t = target;\n    this.s = start;\n    this.c = change;\n    this.p = prop;\n    this.r = renderer || _renderPlain;\n    this.d = data || this;\n    this.set = setter || _setterPlain;\n    this.pr = priority || 0;\n    this._next = next;\n\n    if (next) {\n      next._prev = this;\n    }\n  }\n\n  var _proto4 = PropTween.prototype;\n\n  _proto4.modifier = function modifier(func, tween, target) {\n    this.mSet = this.mSet || this.set; //in case it was already set (a PropTween can only have one modifier)\n\n    this.set = _setterWithModifier;\n    this.m = func;\n    this.mt = target; //modifier target\n\n    this.tween = tween;\n  };\n\n  return PropTween;\n}(); //Initialization tasks\n\n_forEachName(_callbackNames + \"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger\", function (name) {\n  return _reservedProps[name] = 1;\n});\n\n_globals.TweenMax = _globals.TweenLite = Tween;\n_globals.TimelineLite = _globals.TimelineMax = Timeline;\n_globalTimeline = new Timeline({\n  sortChildren: false,\n  defaults: _defaults,\n  autoRemoveChildren: true,\n  id: \"root\",\n  smoothChildTiming: true\n});\n_config.stringFilter = _colorStringFilter;\n/*\n * --------------------------------------------------------------------------------------\n * GSAP\n * --------------------------------------------------------------------------------------\n */\n\nvar _gsap = {\n  registerPlugin: function registerPlugin() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    args.forEach(function (config) {\n      return _createPlugin(config);\n    });\n  },\n  timeline: function timeline(vars) {\n    return new Timeline(vars);\n  },\n  getTweensOf: function getTweensOf(targets, onlyActive) {\n    return _globalTimeline.getTweensOf(targets, onlyActive);\n  },\n  getProperty: function getProperty(target, property, unit, uncache) {\n    _isString(target) && (target = toArray(target)[0]); //in case selector text or an array is passed in\n\n    var getter = _getCache(target || {}).get,\n        format = unit ? _passThrough : _numericIfPossible;\n\n    unit === \"native\" && (unit = \"\");\n    return !target ? target : !property ? function (property, unit, uncache) {\n      return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));\n    } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));\n  },\n  quickSetter: function quickSetter(target, property, unit) {\n    target = toArray(target);\n\n    if (target.length > 1) {\n      var setters = target.map(function (t) {\n        return gsap.quickSetter(t, property, unit);\n      }),\n          l = setters.length;\n      return function (value) {\n        var i = l;\n\n        while (i--) {\n          setters[i](value);\n        }\n      };\n    }\n\n    target = target[0] || {};\n\n    var Plugin = _plugins[property],\n        cache = _getCache(target),\n        p = cache.harness && (cache.harness.aliases || {})[property] || property,\n        // in case it's an alias, like \"rotate\" for \"rotation\".\n    setter = Plugin ? function (value) {\n      var p = new Plugin();\n      _quickTween._pt = 0;\n      p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);\n      p.render(1, p);\n      _quickTween._pt && _renderPropTweens(1, _quickTween);\n    } : cache.set(target, p);\n\n    return Plugin ? setter : function (value) {\n      return setter(target, p, unit ? value + unit : value, cache, 1);\n    };\n  },\n  isTweening: function isTweening(targets) {\n    return _globalTimeline.getTweensOf(targets, true).length > 0;\n  },\n  defaults: function defaults(value) {\n    value && value.ease && (value.ease = _parseEase(value.ease, _defaults.ease));\n    return _mergeDeep(_defaults, value || {});\n  },\n  config: function config(value) {\n    return _mergeDeep(_config, value || {});\n  },\n  registerEffect: function registerEffect(_ref2) {\n    var name = _ref2.name,\n        effect = _ref2.effect,\n        plugins = _ref2.plugins,\n        defaults = _ref2.defaults,\n        extendTimeline = _ref2.extendTimeline;\n    (plugins || \"\").split(\",\").forEach(function (pluginName) {\n      return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + \" effect requires \" + pluginName + \" plugin.\");\n    });\n\n    _effects[name] = function (targets, vars, tl) {\n      return effect(toArray(targets), _setDefaults(vars || {}, defaults), tl);\n    };\n\n    if (extendTimeline) {\n      Timeline.prototype[name] = function (targets, vars, position) {\n        return this.add(_effects[name](targets, _isObject(vars) ? vars : (position = vars) && {}, this), position);\n      };\n    }\n  },\n  registerEase: function registerEase(name, ease) {\n    _easeMap[name] = _parseEase(ease);\n  },\n  parseEase: function parseEase(ease, defaultEase) {\n    return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;\n  },\n  getById: function getById(id) {\n    return _globalTimeline.getById(id);\n  },\n  exportRoot: function exportRoot(vars, includeDelayedCalls) {\n    if (vars === void 0) {\n      vars = {};\n    }\n\n    var tl = new Timeline(vars),\n        child,\n        next;\n    tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);\n\n    _globalTimeline.remove(tl);\n\n    tl._dp = 0; //otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).\n\n    tl._time = tl._tTime = _globalTimeline._time;\n    child = _globalTimeline._first;\n\n    while (child) {\n      next = child._next;\n\n      if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {\n        _addToTimeline(tl, child, child._start - child._delay);\n      }\n\n      child = next;\n    }\n\n    _addToTimeline(_globalTimeline, tl, 0);\n\n    return tl;\n  },\n  utils: {\n    wrap: wrap,\n    wrapYoyo: wrapYoyo,\n    distribute: distribute,\n    random: random,\n    snap: snap,\n    normalize: normalize,\n    getUnit: getUnit,\n    clamp: clamp,\n    splitColor: splitColor,\n    toArray: toArray,\n    mapRange: mapRange,\n    pipe: pipe,\n    unitize: unitize,\n    interpolate: interpolate,\n    shuffle: shuffle\n  },\n  install: _install,\n  effects: _effects,\n  ticker: _ticker,\n  updateRoot: Timeline.updateRoot,\n  plugins: _plugins,\n  globalTimeline: _globalTimeline,\n  core: {\n    PropTween: PropTween,\n    globals: _addGlobal,\n    Tween: Tween,\n    Timeline: Timeline,\n    Animation: Animation,\n    getCache: _getCache,\n    _removeLinkedListItem: _removeLinkedListItem,\n    suppressOverwrites: function suppressOverwrites(value) {\n      return _suppressOverwrites = value;\n    }\n  }\n};\n\n_forEachName(\"to,from,fromTo,delayedCall,set,killTweensOf\", function (name) {\n  return _gsap[name] = Tween[name];\n});\n\n_ticker.add(Timeline.updateRoot);\n\n_quickTween = _gsap.to({}, {\n  duration: 0\n}); // ---- EXTRA PLUGINS --------------------------------------------------------\n\nvar _getPluginPropTween = function _getPluginPropTween(plugin, prop) {\n  var pt = plugin._pt;\n\n  while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {\n    pt = pt._next;\n  }\n\n  return pt;\n},\n    _addModifiers = function _addModifiers(tween, modifiers) {\n  var targets = tween._targets,\n      p,\n      i,\n      pt;\n\n  for (p in modifiers) {\n    i = targets.length;\n\n    while (i--) {\n      pt = tween._ptLookup[i][p];\n\n      if (pt && (pt = pt.d)) {\n        if (pt._pt) {\n          // is a plugin\n          pt = _getPluginPropTween(pt, p);\n        }\n\n        pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);\n      }\n    }\n  }\n},\n    _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {\n  return {\n    name: name,\n    rawVars: 1,\n    //don't pre-process function-based values or \"random()\" strings.\n    init: function init(target, vars, tween) {\n      tween._onInit = function (tween) {\n        var temp, p;\n\n        if (_isString(vars)) {\n          temp = {};\n\n          _forEachName(vars, function (name) {\n            return temp[name] = 1;\n          }); //if the user passes in a comma-delimited list of property names to roundProps, like \"x,y\", we round to whole numbers.\n\n\n          vars = temp;\n        }\n\n        if (modifier) {\n          temp = {};\n\n          for (p in vars) {\n            temp[p] = modifier(vars[p]);\n          }\n\n          vars = temp;\n        }\n\n        _addModifiers(tween, vars);\n      };\n    }\n  };\n}; //register core plugins\n\n\nexport var gsap = _gsap.registerPlugin({\n  name: \"attr\",\n  init: function init(target, vars, tween, index, targets) {\n    var p, pt;\n\n    for (p in vars) {\n      pt = this.add(target, \"setAttribute\", (target.getAttribute(p) || 0) + \"\", vars[p], index, targets, 0, 0, p);\n      pt && (pt.op = p);\n\n      this._props.push(p);\n    }\n  }\n}, {\n  name: \"endArray\",\n  init: function init(target, value) {\n    var i = value.length;\n\n    while (i--) {\n      this.add(target, i, target[i] || 0, value[i]);\n    }\n  }\n}, _buildModifierPlugin(\"roundProps\", _roundModifier), _buildModifierPlugin(\"modifiers\"), _buildModifierPlugin(\"snap\", snap)) || _gsap; //to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.\n\nTween.version = Timeline.version = gsap.version = \"3.6.0\";\n_coreReady = 1;\n\nif (_windowExists()) {\n  _wake();\n}\n\nvar Power0 = _easeMap.Power0,\n    Power1 = _easeMap.Power1,\n    Power2 = _easeMap.Power2,\n    Power3 = _easeMap.Power3,\n    Power4 = _easeMap.Power4,\n    Linear = _easeMap.Linear,\n    Quad = _easeMap.Quad,\n    Cubic = _easeMap.Cubic,\n    Quart = _easeMap.Quart,\n    Quint = _easeMap.Quint,\n    Strong = _easeMap.Strong,\n    Elastic = _easeMap.Elastic,\n    Back = _easeMap.Back,\n    SteppedEase = _easeMap.SteppedEase,\n    Bounce = _easeMap.Bounce,\n    Sine = _easeMap.Sine,\n    Expo = _easeMap.Expo,\n    Circ = _easeMap.Circ;\nexport { Power0, Power1, Power2, Power3, Power4, Linear, Quad, Cubic, Quart, Quint, Strong, Elastic, Back, SteppedEase, Bounce, Sine, Expo, Circ };\nexport { Tween as TweenMax, Tween as TweenLite, Timeline as TimelineMax, Timeline as TimelineLite, gsap as default, wrap, wrapYoyo, distribute, random, snap, normalize, getUnit, clamp, splitColor, toArray, mapRange, pipe, unitize, interpolate, shuffle }; //export some internal methods/orojects for use in CSSPlugin so that we can externalize that file and allow custom builds that exclude it.\n\nexport { _getProperty, _numExp, _numWithUnitExp, _isString, _isUndefined, _renderComplexString, _relExp, _setDefaults, _removeLinkedListItem, _forEachName, _sortPropTweensByPriority, _colorStringFilter, _replaceRandom, _checkPlugin, _plugins, _ticker, _config, _roundModifier, _round, _missingPlugin, _getSetter, _getCache };","/*!\n * CSSPlugin 3.6.0\n * https://greensock.com\n *\n * Copyright 2008-2021, GreenSock. All rights reserved.\n * Subject to the terms at https://greensock.com/standard-license or for\n * Club GreenSock members, the agreement issued with that membership.\n * @author: Jack Doyle, jack@greensock.com\n*/\n\n/* eslint-disable */\nimport { gsap, _getProperty, _numExp, _numWithUnitExp, getUnit, _isString, _isUndefined, _renderComplexString, _relExp, _forEachName, _sortPropTweensByPriority, _colorStringFilter, _checkPlugin, _replaceRandom, _plugins, GSCache, PropTween, _config, _ticker, _round, _missingPlugin, _getSetter, _getCache, _setDefaults, _removeLinkedListItem //for the commented-out className feature.\n} from \"./gsap-core.js\";\n\nvar _win,\n    _doc,\n    _docElement,\n    _pluginInitted,\n    _tempDiv,\n    _tempDivStyler,\n    _recentSetterPlugin,\n    _windowExists = function _windowExists() {\n  return typeof window !== \"undefined\";\n},\n    _transformProps = {},\n    _RAD2DEG = 180 / Math.PI,\n    _DEG2RAD = Math.PI / 180,\n    _atan2 = Math.atan2,\n    _bigNum = 1e8,\n    _capsExp = /([A-Z])/g,\n    _horizontalExp = /(?:left|right|width|margin|padding|x)/i,\n    _complexExp = /[\\s,\\(]\\S/,\n    _propertyAliases = {\n  autoAlpha: \"opacity,visibility\",\n  scale: \"scaleX,scaleY\",\n  alpha: \"opacity\"\n},\n    _renderCSSProp = function _renderCSSProp(ratio, data) {\n  return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\n},\n    _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {\n  return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);\n},\n    _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {\n  return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);\n},\n    //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)\n_renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {\n  var value = data.s + data.c * ratio;\n  data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);\n},\n    _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {\n  return data.set(data.t, data.p, ratio ? data.e : data.b, data);\n},\n    _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {\n  return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);\n},\n    _setterCSSStyle = function _setterCSSStyle(target, property, value) {\n  return target.style[property] = value;\n},\n    _setterCSSProp = function _setterCSSProp(target, property, value) {\n  return target.style.setProperty(property, value);\n},\n    _setterTransform = function _setterTransform(target, property, value) {\n  return target._gsap[property] = value;\n},\n    _setterScale = function _setterScale(target, property, value) {\n  return target._gsap.scaleX = target._gsap.scaleY = value;\n},\n    _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {\n  var cache = target._gsap;\n  cache.scaleX = cache.scaleY = value;\n  cache.renderTransform(ratio, cache);\n},\n    _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {\n  var cache = target._gsap;\n  cache[property] = value;\n  cache.renderTransform(ratio, cache);\n},\n    _transformProp = \"transform\",\n    _transformOriginProp = _transformProp + \"Origin\",\n    _supports3D,\n    _createElement = function _createElement(type, ns) {\n  var e = _doc.createElementNS ? _doc.createElementNS((ns || \"http://www.w3.org/1999/xhtml\").replace(/^https/, \"http\"), type) : _doc.createElement(type); //some servers swap in https for http in the namespace which can break things, making \"style\" inaccessible.\n\n  return e.style ? e : _doc.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://greensock.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).\n},\n    _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {\n  var cs = getComputedStyle(target);\n  return cs[property] || cs.getPropertyValue(property.replace(_capsExp, \"-$1\").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || \"\"; //css variables may not need caps swapped out for dashes and lowercase.\n},\n    _prefixes = \"O,Moz,ms,Ms,Webkit\".split(\",\"),\n    _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {\n  var e = element || _tempDiv,\n      s = e.style,\n      i = 5;\n\n  if (property in s && !preferPrefix) {\n    return property;\n  }\n\n  property = property.charAt(0).toUpperCase() + property.substr(1);\n\n  while (i-- && !(_prefixes[i] + property in s)) {}\n\n  return i < 0 ? null : (i === 3 ? \"ms\" : i >= 0 ? _prefixes[i] : \"\") + property;\n},\n    _initCore = function _initCore() {\n  if (_windowExists() && window.document) {\n    _win = window;\n    _doc = _win.document;\n    _docElement = _doc.documentElement;\n    _tempDiv = _createElement(\"div\") || {\n      style: {}\n    };\n    _tempDivStyler = _createElement(\"div\");\n    _transformProp = _checkPropPrefix(_transformProp);\n    _transformOriginProp = _transformProp + \"Origin\";\n    _tempDiv.style.cssText = \"border-width:0;line-height:0;position:absolute;padding:0\"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.\n\n    _supports3D = !!_checkPropPrefix(\"perspective\");\n    _pluginInitted = 1;\n  }\n},\n    _getBBoxHack = function _getBBoxHack(swapIfPossible) {\n  //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).\n  var svg = _createElement(\"svg\", this.ownerSVGElement && this.ownerSVGElement.getAttribute(\"xmlns\") || \"http://www.w3.org/2000/svg\"),\n      oldParent = this.parentNode,\n      oldSibling = this.nextSibling,\n      oldCSS = this.style.cssText,\n      bbox;\n\n  _docElement.appendChild(svg);\n\n  svg.appendChild(this);\n  this.style.display = \"block\";\n\n  if (swapIfPossible) {\n    try {\n      bbox = this.getBBox();\n      this._gsapBBox = this.getBBox; //store the original\n\n      this.getBBox = _getBBoxHack;\n    } catch (e) {}\n  } else if (this._gsapBBox) {\n    bbox = this._gsapBBox();\n  }\n\n  if (oldParent) {\n    if (oldSibling) {\n      oldParent.insertBefore(this, oldSibling);\n    } else {\n      oldParent.appendChild(this);\n    }\n  }\n\n  _docElement.removeChild(svg);\n\n  this.style.cssText = oldCSS;\n  return bbox;\n},\n    _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {\n  var i = attributesArray.length;\n\n  while (i--) {\n    if (target.hasAttribute(attributesArray[i])) {\n      return target.getAttribute(attributesArray[i]);\n    }\n  }\n},\n    _getBBox = function _getBBox(target) {\n  var bounds;\n\n  try {\n    bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118\n  } catch (error) {\n    bounds = _getBBoxHack.call(target, true);\n  }\n\n  bounds && (bounds.width || bounds.height) || target.getBBox === _getBBoxHack || (bounds = _getBBoxHack.call(target, true)); //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.\n\n  return bounds && !bounds.width && !bounds.x && !bounds.y ? {\n    x: +_getAttributeFallbacks(target, [\"x\", \"cx\", \"x1\"]) || 0,\n    y: +_getAttributeFallbacks(target, [\"y\", \"cy\", \"y1\"]) || 0,\n    width: 0,\n    height: 0\n  } : bounds;\n},\n    _isSVG = function _isSVG(e) {\n  return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));\n},\n    //reports if the element is an SVG on which getBBox() actually works\n_removeProperty = function _removeProperty(target, property) {\n  if (property) {\n    var style = target.style;\n\n    if (property in _transformProps && property !== _transformOriginProp) {\n      property = _transformProp;\n    }\n\n    if (style.removeProperty) {\n      if (property.substr(0, 2) === \"ms\" || property.substr(0, 6) === \"webkit\") {\n        //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be \"ms-transform\" instead of \"-ms-transform\" for IE9, for example)\n        property = \"-\" + property;\n      }\n\n      style.removeProperty(property.replace(_capsExp, \"-$1\").toLowerCase());\n    } else {\n      //note: old versions of IE use \"removeAttribute()\" instead of \"removeProperty()\"\n      style.removeAttribute(property);\n    }\n  }\n},\n    _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {\n  var pt = new PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);\n  plugin._pt = pt;\n  pt.b = beginning;\n  pt.e = end;\n\n  plugin._props.push(property);\n\n  return pt;\n},\n    _nonConvertibleUnits = {\n  deg: 1,\n  rad: 1,\n  turn: 1\n},\n    //takes a single value like 20px and converts it to the unit specified, like \"%\", returning only the numeric amount.\n_convertToUnit = function _convertToUnit(target, property, value, unit) {\n  var curValue = parseFloat(value) || 0,\n      curUnit = (value + \"\").trim().substr((curValue + \"\").length) || \"px\",\n      // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()\n  style = _tempDiv.style,\n      horizontal = _horizontalExp.test(property),\n      isRootSVG = target.tagName.toLowerCase() === \"svg\",\n      measureProperty = (isRootSVG ? \"client\" : \"offset\") + (horizontal ? \"Width\" : \"Height\"),\n      amount = 100,\n      toPixels = unit === \"px\",\n      toPercent = unit === \"%\",\n      px,\n      parent,\n      cache,\n      isSVG;\n\n  if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {\n    return curValue;\n  }\n\n  curUnit !== \"px\" && !toPixels && (curValue = _convertToUnit(target, property, value, \"px\"));\n  isSVG = target.getCTM && _isSVG(target);\n\n  if ((toPercent || curUnit === \"%\") && (_transformProps[property] || ~property.indexOf(\"adius\"))) {\n    px = isSVG ? target.getBBox()[horizontal ? \"width\" : \"height\"] : target[measureProperty];\n    return _round(toPercent ? curValue / px * amount : curValue / 100 * px);\n  }\n\n  style[horizontal ? \"width\" : \"height\"] = amount + (toPixels ? curUnit : unit);\n  parent = ~property.indexOf(\"adius\") || unit === \"em\" && target.appendChild && !isRootSVG ? target : target.parentNode;\n\n  if (isSVG) {\n    parent = (target.ownerSVGElement || {}).parentNode;\n  }\n\n  if (!parent || parent === _doc || !parent.appendChild) {\n    parent = _doc.body;\n  }\n\n  cache = parent._gsap;\n\n  if (cache && toPercent && cache.width && horizontal && cache.time === _ticker.time) {\n    return _round(curValue / cache.width * amount);\n  } else {\n    (toPercent || curUnit === \"%\") && (style.position = _getComputedProperty(target, \"position\"));\n    parent === target && (style.position = \"static\"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.\n\n    parent.appendChild(_tempDiv);\n    px = _tempDiv[measureProperty];\n    parent.removeChild(_tempDiv);\n    style.position = \"absolute\";\n\n    if (horizontal && toPercent) {\n      cache = _getCache(parent);\n      cache.time = _ticker.time;\n      cache.width = parent[measureProperty];\n    }\n  }\n\n  return _round(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);\n},\n    _get = function _get(target, property, unit, uncache) {\n  var value;\n  _pluginInitted || _initCore();\n\n  if (property in _propertyAliases && property !== \"transform\") {\n    property = _propertyAliases[property];\n\n    if (~property.indexOf(\",\")) {\n      property = property.split(\",\")[0];\n    }\n  }\n\n  if (_transformProps[property] && property !== \"transform\") {\n    value = _parseTransform(target, uncache);\n    value = property !== \"transformOrigin\" ? value[property] : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + \" \" + value.zOrigin + \"px\";\n  } else {\n    value = target.style[property];\n\n    if (!value || value === \"auto\" || uncache || ~(value + \"\").indexOf(\"calc(\")) {\n      value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || _getProperty(target, property) || (property === \"opacity\" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius\n    }\n  }\n\n  return unit && !~(value + \"\").trim().indexOf(\" \") ? _convertToUnit(target, property, value, unit) + unit : value;\n},\n    _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {\n  //note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus \"this\" would refer to the plugin.\n  if (!start || start === \"none\") {\n    // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style (\"clipPath\" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as \"none\" whereas WebkitClipPath reports accurately like \"ellipse(100% 0% at 50% 0%)\", so in this case we must SWITCH to using the prefixed property instead. See https://greensock.com/forums/topic/18310-clippath-doesnt-work-on-ios/\n    var p = _checkPropPrefix(prop, target, 1),\n        s = p && _getComputedProperty(target, p, 1);\n\n    if (s && s !== start) {\n      prop = p;\n      start = s;\n    } else if (prop === \"borderColor\") {\n      start = _getComputedProperty(target, \"borderTopColor\"); // Firefox bug: always reports \"borderColor\" as \"\", so we must fall back to borderTopColor. See https://greensock.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/\n    }\n  }\n\n  var pt = new PropTween(this._pt, target.style, prop, 0, 1, _renderComplexString),\n      index = 0,\n      matchIndex = 0,\n      a,\n      result,\n      startValues,\n      startNum,\n      color,\n      startValue,\n      endValue,\n      endNum,\n      chunk,\n      endUnit,\n      startUnit,\n      relative,\n      endValues;\n  pt.b = start;\n  pt.e = end;\n  start += \"\"; //ensure values are strings\n\n  end += \"\";\n\n  if (end === \"auto\") {\n    target.style[prop] = end;\n    end = _getComputedProperty(target, prop) || end;\n    target.style[prop] = start;\n  }\n\n  a = [start, end];\n\n  _colorStringFilter(a); //pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().\n\n\n  start = a[0];\n  end = a[1];\n  startValues = start.match(_numWithUnitExp) || [];\n  endValues = end.match(_numWithUnitExp) || [];\n\n  if (endValues.length) {\n    while (result = _numWithUnitExp.exec(end)) {\n      endValue = result[0];\n      chunk = end.substring(index, result.index);\n\n      if (color) {\n        color = (color + 1) % 5;\n      } else if (chunk.substr(-5) === \"rgba(\" || chunk.substr(-5) === \"hsla(\") {\n        color = 1;\n      }\n\n      if (endValue !== (startValue = startValues[matchIndex++] || \"\")) {\n        startNum = parseFloat(startValue) || 0;\n        startUnit = startValue.substr((startNum + \"\").length);\n        relative = endValue.charAt(1) === \"=\" ? +(endValue.charAt(0) + \"1\") : 0;\n\n        if (relative) {\n          endValue = endValue.substr(2);\n        }\n\n        endNum = parseFloat(endValue);\n        endUnit = endValue.substr((endNum + \"\").length);\n        index = _numWithUnitExp.lastIndex - endUnit.length;\n\n        if (!endUnit) {\n          //if something like \"perspective:300\" is passed in and we must add a unit to the end\n          endUnit = endUnit || _config.units[prop] || startUnit;\n\n          if (index === end.length) {\n            end += endUnit;\n            pt.e += endUnit;\n          }\n        }\n\n        if (startUnit !== endUnit) {\n          startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;\n        } //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.\n\n\n        pt._pt = {\n          _next: pt._pt,\n          p: chunk || matchIndex === 1 ? chunk : \",\",\n          //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.\n          s: startNum,\n          c: relative ? relative * endNum : endNum - startNum,\n          m: color && color < 4 || prop === \"zIndex\" ? Math.round : 0\n        };\n      }\n    }\n\n    pt.c = index < end.length ? end.substring(index, end.length) : \"\"; //we use the \"c\" of the PropTween to store the final part of the string (after the last number)\n  } else {\n    pt.r = prop === \"display\" && end === \"none\" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;\n  }\n\n  _relExp.test(end) && (pt.e = 0); //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).\n\n  this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus \"this\" would refer to the plugin.\n\n  return pt;\n},\n    _keywordToPercent = {\n  top: \"0%\",\n  bottom: \"100%\",\n  left: \"0%\",\n  right: \"100%\",\n  center: \"50%\"\n},\n    _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {\n  var split = value.split(\" \"),\n      x = split[0],\n      y = split[1] || \"50%\";\n\n  if (x === \"top\" || x === \"bottom\" || y === \"left\" || y === \"right\") {\n    //the user provided them in the wrong order, so flip them\n    value = x;\n    x = y;\n    y = value;\n  }\n\n  split[0] = _keywordToPercent[x] || x;\n  split[1] = _keywordToPercent[y] || y;\n  return split.join(\" \");\n},\n    _renderClearProps = function _renderClearProps(ratio, data) {\n  if (data.tween && data.tween._time === data.tween._dur) {\n    var target = data.t,\n        style = target.style,\n        props = data.u,\n        cache = target._gsap,\n        prop,\n        clearTransforms,\n        i;\n\n    if (props === \"all\" || props === true) {\n      style.cssText = \"\";\n      clearTransforms = 1;\n    } else {\n      props = props.split(\",\");\n      i = props.length;\n\n      while (--i > -1) {\n        prop = props[i];\n\n        if (_transformProps[prop]) {\n          clearTransforms = 1;\n          prop = prop === \"transformOrigin\" ? _transformOriginProp : _transformProp;\n        }\n\n        _removeProperty(target, prop);\n      }\n    }\n\n    if (clearTransforms) {\n      _removeProperty(target, _transformProp);\n\n      if (cache) {\n        cache.svg && target.removeAttribute(\"transform\");\n\n        _parseTransform(target, 1); // force all the cached values back to \"normal\"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.\n\n\n        cache.uncache = 1;\n      }\n    }\n  }\n},\n    // note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.\n_specialProps = {\n  clearProps: function clearProps(plugin, target, property, endValue, tween) {\n    if (tween.data !== \"isFromStart\") {\n      var pt = plugin._pt = new PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);\n      pt.u = endValue;\n      pt.pr = -10;\n      pt.tween = tween;\n\n      plugin._props.push(property);\n\n      return 1;\n    }\n  }\n  /* className feature (about 0.4kb gzipped).\n  , className(plugin, target, property, endValue, tween) {\n  \tlet _renderClassName = (ratio, data) => {\n  \t\t\tdata.css.render(ratio, data.css);\n  \t\t\tif (!ratio || ratio === 1) {\n  \t\t\t\tlet inline = data.rmv,\n  \t\t\t\t\ttarget = data.t,\n  \t\t\t\t\tp;\n  \t\t\t\ttarget.setAttribute(\"class\", ratio ? data.e : data.b);\n  \t\t\t\tfor (p in inline) {\n  \t\t\t\t\t_removeProperty(target, p);\n  \t\t\t\t}\n  \t\t\t}\n  \t\t},\n  \t\t_getAllStyles = (target) => {\n  \t\t\tlet styles = {},\n  \t\t\t\tcomputed = getComputedStyle(target),\n  \t\t\t\tp;\n  \t\t\tfor (p in computed) {\n  \t\t\t\tif (isNaN(p) && p !== \"cssText\" && p !== \"length\") {\n  \t\t\t\t\tstyles[p] = computed[p];\n  \t\t\t\t}\n  \t\t\t}\n  \t\t\t_setDefaults(styles, _parseTransform(target, 1));\n  \t\t\treturn styles;\n  \t\t},\n  \t\tstartClassList = target.getAttribute(\"class\"),\n  \t\tstyle = target.style,\n  \t\tcssText = style.cssText,\n  \t\tcache = target._gsap,\n  \t\tclassPT = cache.classPT,\n  \t\tinlineToRemoveAtEnd = {},\n  \t\tdata = {t:target, plugin:plugin, rmv:inlineToRemoveAtEnd, b:startClassList, e:(endValue.charAt(1) !== \"=\") ? endValue : startClassList.replace(new RegExp(\"(?:\\\\s|^)\" + endValue.substr(2) + \"(?![\\\\w-])\"), \"\") + ((endValue.charAt(0) === \"+\") ? \" \" + endValue.substr(2) : \"\")},\n  \t\tchangingVars = {},\n  \t\tstartVars = _getAllStyles(target),\n  \t\ttransformRelated = /(transform|perspective)/i,\n  \t\tendVars, p;\n  \tif (classPT) {\n  \t\tclassPT.r(1, classPT.d);\n  \t\t_removeLinkedListItem(classPT.d.plugin, classPT, \"_pt\");\n  \t}\n  \ttarget.setAttribute(\"class\", data.e);\n  \tendVars = _getAllStyles(target, true);\n  \ttarget.setAttribute(\"class\", startClassList);\n  \tfor (p in endVars) {\n  \t\tif (endVars[p] !== startVars[p] && !transformRelated.test(p)) {\n  \t\t\tchangingVars[p] = endVars[p];\n  \t\t\tif (!style[p] && style[p] !== \"0\") {\n  \t\t\t\tinlineToRemoveAtEnd[p] = 1;\n  \t\t\t}\n  \t\t}\n  \t}\n  \tcache.classPT = plugin._pt = new PropTween(plugin._pt, target, \"className\", 0, 0, _renderClassName, data, 0, -11);\n  \tif (style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://greensock.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.\n  \t\tstyle.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).\n  \t}\n  \t_parseTransform(target, true); //to clear the caching of transforms\n  \tdata.css = new gsap.plugins.css();\n  \tdata.css.init(target, changingVars, tween);\n  \tplugin._props.push(...data.css._props);\n  \treturn 1;\n  }\n  */\n\n},\n\n/*\n * --------------------------------------------------------------------------------------\n * TRANSFORMS\n * --------------------------------------------------------------------------------------\n */\n_identity2DMatrix = [1, 0, 0, 1, 0, 0],\n    _rotationalProperties = {},\n    _isNullTransform = function _isNullTransform(value) {\n  return value === \"matrix(1, 0, 0, 1, 0, 0)\" || value === \"none\" || !value;\n},\n    _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {\n  var matrixString = _getComputedProperty(target, _transformProp);\n\n  return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_numExp).map(_round);\n},\n    _getMatrix = function _getMatrix(target, force2D) {\n  var cache = target._gsap || _getCache(target),\n      style = target.style,\n      matrix = _getComputedTransformMatrixAsArray(target),\n      parent,\n      nextSibling,\n      temp,\n      addedToDOM;\n\n  if (cache.svg && target.getAttribute(\"transform\")) {\n    temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like \"translate(50,60) rotate(135,0,0)\" are parsed because it mashes it into a matrix.\n\n    matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];\n    return matrix.join(\",\") === \"1,0,0,1,0,0\" ? _identity2DMatrix : matrix;\n  } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {\n    //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not \"none\". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).\n    temp = style.display;\n    style.display = \"block\";\n    parent = target.parentNode;\n\n    if (!parent || !target.offsetParent) {\n      // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375\n      addedToDOM = 1; //flag\n\n      nextSibling = target.nextSibling;\n\n      _docElement.appendChild(target); //we must add it to the DOM in order to get values properly\n\n    }\n\n    matrix = _getComputedTransformMatrixAsArray(target);\n    temp ? style.display = temp : _removeProperty(target, \"display\");\n\n    if (addedToDOM) {\n      nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);\n    }\n  }\n\n  return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;\n},\n    _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {\n  var cache = target._gsap,\n      matrix = matrixArray || _getMatrix(target, true),\n      xOriginOld = cache.xOrigin || 0,\n      yOriginOld = cache.yOrigin || 0,\n      xOffsetOld = cache.xOffset || 0,\n      yOffsetOld = cache.yOffset || 0,\n      a = matrix[0],\n      b = matrix[1],\n      c = matrix[2],\n      d = matrix[3],\n      tx = matrix[4],\n      ty = matrix[5],\n      originSplit = origin.split(\" \"),\n      xOrigin = parseFloat(originSplit[0]) || 0,\n      yOrigin = parseFloat(originSplit[1]) || 0,\n      bounds,\n      determinant,\n      x,\n      y;\n\n  if (!originIsAbsolute) {\n    bounds = _getBBox(target);\n    xOrigin = bounds.x + (~originSplit[0].indexOf(\"%\") ? xOrigin / 100 * bounds.width : xOrigin);\n    yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf(\"%\") ? yOrigin / 100 * bounds.height : yOrigin);\n  } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {\n    //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.\n    x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;\n    y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;\n    xOrigin = x;\n    yOrigin = y;\n  }\n\n  if (smooth || smooth !== false && cache.smooth) {\n    tx = xOrigin - xOriginOld;\n    ty = yOrigin - yOriginOld;\n    cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;\n    cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;\n  } else {\n    cache.xOffset = cache.yOffset = 0;\n  }\n\n  cache.xOrigin = xOrigin;\n  cache.yOrigin = yOrigin;\n  cache.smooth = !!smooth;\n  cache.origin = origin;\n  cache.originIsAbsolute = !!originIsAbsolute;\n  target.style[_transformOriginProp] = \"0px 0px\"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).\n\n  if (pluginToAddPropTweensTo) {\n    _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"xOrigin\", xOriginOld, xOrigin);\n\n    _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"yOrigin\", yOriginOld, yOrigin);\n\n    _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"xOffset\", xOffsetOld, cache.xOffset);\n\n    _addNonTweeningPT(pluginToAddPropTweensTo, cache, \"yOffset\", yOffsetOld, cache.yOffset);\n  }\n\n  target.setAttribute(\"data-svg-origin\", xOrigin + \" \" + yOrigin);\n},\n    _parseTransform = function _parseTransform(target, uncache) {\n  var cache = target._gsap || new GSCache(target);\n\n  if (\"x\" in cache && !uncache && !cache.uncache) {\n    return cache;\n  }\n\n  var style = target.style,\n      invertedScaleX = cache.scaleX < 0,\n      px = \"px\",\n      deg = \"deg\",\n      origin = _getComputedProperty(target, _transformOriginProp) || \"0\",\n      x,\n      y,\n      z,\n      scaleX,\n      scaleY,\n      rotation,\n      rotationX,\n      rotationY,\n      skewX,\n      skewY,\n      perspective,\n      xOrigin,\n      yOrigin,\n      matrix,\n      angle,\n      cos,\n      sin,\n      a,\n      b,\n      c,\n      d,\n      a12,\n      a22,\n      t1,\n      t2,\n      t3,\n      a13,\n      a23,\n      a33,\n      a42,\n      a43,\n      a32;\n  x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;\n  scaleX = scaleY = 1;\n  cache.svg = !!(target.getCTM && _isSVG(target));\n  matrix = _getMatrix(target, cache.svg);\n\n  if (cache.svg) {\n    t1 = !cache.uncache && target.getAttribute(\"data-svg-origin\");\n\n    _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);\n  }\n\n  xOrigin = cache.xOrigin || 0;\n  yOrigin = cache.yOrigin || 0;\n\n  if (matrix !== _identity2DMatrix) {\n    a = matrix[0]; //a11\n\n    b = matrix[1]; //a21\n\n    c = matrix[2]; //a31\n\n    d = matrix[3]; //a41\n\n    x = a12 = matrix[4];\n    y = a22 = matrix[5]; //2D matrix\n\n    if (matrix.length === 6) {\n      scaleX = Math.sqrt(a * a + b * b);\n      scaleY = Math.sqrt(d * d + c * c);\n      rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).\n\n      skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;\n      skewX && (scaleY *= Math.cos(skewX * _DEG2RAD));\n\n      if (cache.svg) {\n        x -= xOrigin - (xOrigin * a + yOrigin * c);\n        y -= yOrigin - (xOrigin * b + yOrigin * d);\n      } //3D matrix\n\n    } else {\n      a32 = matrix[6];\n      a42 = matrix[7];\n      a13 = matrix[8];\n      a23 = matrix[9];\n      a33 = matrix[10];\n      a43 = matrix[11];\n      x = matrix[12];\n      y = matrix[13];\n      z = matrix[14];\n      angle = _atan2(a32, a33);\n      rotationX = angle * _RAD2DEG; //rotationX\n\n      if (angle) {\n        cos = Math.cos(-angle);\n        sin = Math.sin(-angle);\n        t1 = a12 * cos + a13 * sin;\n        t2 = a22 * cos + a23 * sin;\n        t3 = a32 * cos + a33 * sin;\n        a13 = a12 * -sin + a13 * cos;\n        a23 = a22 * -sin + a23 * cos;\n        a33 = a32 * -sin + a33 * cos;\n        a43 = a42 * -sin + a43 * cos;\n        a12 = t1;\n        a22 = t2;\n        a32 = t3;\n      } //rotationY\n\n\n      angle = _atan2(-c, a33);\n      rotationY = angle * _RAD2DEG;\n\n      if (angle) {\n        cos = Math.cos(-angle);\n        sin = Math.sin(-angle);\n        t1 = a * cos - a13 * sin;\n        t2 = b * cos - a23 * sin;\n        t3 = c * cos - a33 * sin;\n        a43 = d * sin + a43 * cos;\n        a = t1;\n        b = t2;\n        c = t3;\n      } //rotationZ\n\n\n      angle = _atan2(b, a);\n      rotation = angle * _RAD2DEG;\n\n      if (angle) {\n        cos = Math.cos(angle);\n        sin = Math.sin(angle);\n        t1 = a * cos + b * sin;\n        t2 = a12 * cos + a22 * sin;\n        b = b * cos - a * sin;\n        a22 = a22 * cos - a12 * sin;\n        a = t1;\n        a12 = t2;\n      }\n\n      if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {\n        //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.\n        rotationX = rotation = 0;\n        rotationY = 180 - rotationY;\n      }\n\n      scaleX = _round(Math.sqrt(a * a + b * b + c * c));\n      scaleY = _round(Math.sqrt(a22 * a22 + a32 * a32));\n      angle = _atan2(a12, a22);\n      skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;\n      perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;\n    }\n\n    if (cache.svg) {\n      //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).\n      t1 = target.getAttribute(\"transform\");\n      cache.forceCSS = target.setAttribute(\"transform\", \"\") || !_isNullTransform(_getComputedProperty(target, _transformProp));\n      t1 && target.setAttribute(\"transform\", t1);\n    }\n  }\n\n  if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {\n    if (invertedScaleX) {\n      scaleX *= -1;\n      skewX += rotation <= 0 ? 180 : -180;\n      rotation += rotation <= 0 ? 180 : -180;\n    } else {\n      scaleY *= -1;\n      skewX += skewX <= 0 ? 180 : -180;\n    }\n  }\n\n  cache.x = x - ((cache.xPercent = x && (cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;\n  cache.y = y - ((cache.yPercent = y && (cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;\n  cache.z = z + px;\n  cache.scaleX = _round(scaleX);\n  cache.scaleY = _round(scaleY);\n  cache.rotation = _round(rotation) + deg;\n  cache.rotationX = _round(rotationX) + deg;\n  cache.rotationY = _round(rotationY) + deg;\n  cache.skewX = skewX + deg;\n  cache.skewY = skewY + deg;\n  cache.transformPerspective = perspective + px;\n\n  if (cache.zOrigin = parseFloat(origin.split(\" \")[2]) || 0) {\n    style[_transformOriginProp] = _firstTwoOnly(origin);\n  }\n\n  cache.xOffset = cache.yOffset = 0;\n  cache.force3D = _config.force3D;\n  cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;\n  cache.uncache = 0;\n  return cache;\n},\n    _firstTwoOnly = function _firstTwoOnly(value) {\n  return (value = value.split(\" \"))[0] + \" \" + value[1];\n},\n    //for handling transformOrigin values, stripping out the 3rd dimension\n_addPxTranslate = function _addPxTranslate(target, start, value) {\n  var unit = getUnit(start);\n  return _round(parseFloat(start) + parseFloat(_convertToUnit(target, \"x\", value + \"px\", unit))) + unit;\n},\n    _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {\n  cache.z = \"0px\";\n  cache.rotationY = cache.rotationX = \"0deg\";\n  cache.force3D = 0;\n\n  _renderCSSTransforms(ratio, cache);\n},\n    _zeroDeg = \"0deg\",\n    _zeroPx = \"0px\",\n    _endParenthesis = \") \",\n    _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {\n  var _ref = cache || this,\n      xPercent = _ref.xPercent,\n      yPercent = _ref.yPercent,\n      x = _ref.x,\n      y = _ref.y,\n      z = _ref.z,\n      rotation = _ref.rotation,\n      rotationY = _ref.rotationY,\n      rotationX = _ref.rotationX,\n      skewX = _ref.skewX,\n      skewY = _ref.skewY,\n      scaleX = _ref.scaleX,\n      scaleY = _ref.scaleY,\n      transformPerspective = _ref.transformPerspective,\n      force3D = _ref.force3D,\n      target = _ref.target,\n      zOrigin = _ref.zOrigin,\n      transforms = \"\",\n      use3D = force3D === \"auto\" && ratio && ratio !== 1 || force3D === true; // Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)\n\n\n  if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {\n    var angle = parseFloat(rotationY) * _DEG2RAD,\n        a13 = Math.sin(angle),\n        a33 = Math.cos(angle),\n        cos;\n\n    angle = parseFloat(rotationX) * _DEG2RAD;\n    cos = Math.cos(angle);\n    x = _addPxTranslate(target, x, a13 * cos * -zOrigin);\n    y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);\n    z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);\n  }\n\n  if (transformPerspective !== _zeroPx) {\n    transforms += \"perspective(\" + transformPerspective + _endParenthesis;\n  }\n\n  if (xPercent || yPercent) {\n    transforms += \"translate(\" + xPercent + \"%, \" + yPercent + \"%) \";\n  }\n\n  if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {\n    transforms += z !== _zeroPx || use3D ? \"translate3d(\" + x + \", \" + y + \", \" + z + \") \" : \"translate(\" + x + \", \" + y + _endParenthesis;\n  }\n\n  if (rotation !== _zeroDeg) {\n    transforms += \"rotate(\" + rotation + _endParenthesis;\n  }\n\n  if (rotationY !== _zeroDeg) {\n    transforms += \"rotateY(\" + rotationY + _endParenthesis;\n  }\n\n  if (rotationX !== _zeroDeg) {\n    transforms += \"rotateX(\" + rotationX + _endParenthesis;\n  }\n\n  if (skewX !== _zeroDeg || skewY !== _zeroDeg) {\n    transforms += \"skew(\" + skewX + \", \" + skewY + _endParenthesis;\n  }\n\n  if (scaleX !== 1 || scaleY !== 1) {\n    transforms += \"scale(\" + scaleX + \", \" + scaleY + _endParenthesis;\n  }\n\n  target.style[_transformProp] = transforms || \"translate(0, 0)\";\n},\n    _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {\n  var _ref2 = cache || this,\n      xPercent = _ref2.xPercent,\n      yPercent = _ref2.yPercent,\n      x = _ref2.x,\n      y = _ref2.y,\n      rotation = _ref2.rotation,\n      skewX = _ref2.skewX,\n      skewY = _ref2.skewY,\n      scaleX = _ref2.scaleX,\n      scaleY = _ref2.scaleY,\n      target = _ref2.target,\n      xOrigin = _ref2.xOrigin,\n      yOrigin = _ref2.yOrigin,\n      xOffset = _ref2.xOffset,\n      yOffset = _ref2.yOffset,\n      forceCSS = _ref2.forceCSS,\n      tx = parseFloat(x),\n      ty = parseFloat(y),\n      a11,\n      a21,\n      a12,\n      a22,\n      temp;\n\n  rotation = parseFloat(rotation);\n  skewX = parseFloat(skewX);\n  skewY = parseFloat(skewY);\n\n  if (skewY) {\n    //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.\n    skewY = parseFloat(skewY);\n    skewX += skewY;\n    rotation += skewY;\n  }\n\n  if (rotation || skewX) {\n    rotation *= _DEG2RAD;\n    skewX *= _DEG2RAD;\n    a11 = Math.cos(rotation) * scaleX;\n    a21 = Math.sin(rotation) * scaleX;\n    a12 = Math.sin(rotation - skewX) * -scaleY;\n    a22 = Math.cos(rotation - skewX) * scaleY;\n\n    if (skewX) {\n      skewY *= _DEG2RAD;\n      temp = Math.tan(skewX - skewY);\n      temp = Math.sqrt(1 + temp * temp);\n      a12 *= temp;\n      a22 *= temp;\n\n      if (skewY) {\n        temp = Math.tan(skewY);\n        temp = Math.sqrt(1 + temp * temp);\n        a11 *= temp;\n        a21 *= temp;\n      }\n    }\n\n    a11 = _round(a11);\n    a21 = _round(a21);\n    a12 = _round(a12);\n    a22 = _round(a22);\n  } else {\n    a11 = scaleX;\n    a22 = scaleY;\n    a21 = a12 = 0;\n  }\n\n  if (tx && !~(x + \"\").indexOf(\"px\") || ty && !~(y + \"\").indexOf(\"px\")) {\n    tx = _convertToUnit(target, \"x\", x, \"px\");\n    ty = _convertToUnit(target, \"y\", y, \"px\");\n  }\n\n  if (xOrigin || yOrigin || xOffset || yOffset) {\n    tx = _round(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);\n    ty = _round(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);\n  }\n\n  if (xPercent || yPercent) {\n    //The SVG spec doesn't support percentage-based translation in the \"transform\" attribute, so we merge it into the translation to simulate it.\n    temp = target.getBBox();\n    tx = _round(tx + xPercent / 100 * temp.width);\n    ty = _round(ty + yPercent / 100 * temp.height);\n  }\n\n  temp = \"matrix(\" + a11 + \",\" + a21 + \",\" + a12 + \",\" + a22 + \",\" + tx + \",\" + ty + \")\";\n  target.setAttribute(\"transform\", temp);\n  forceCSS && (target.style[_transformProp] = temp); //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the  transform attribute changes!)\n},\n    _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue, relative) {\n  var cap = 360,\n      isString = _isString(endValue),\n      endNum = parseFloat(endValue) * (isString && ~endValue.indexOf(\"rad\") ? _RAD2DEG : 1),\n      change = relative ? endNum * relative : endNum - startNum,\n      finalValue = startNum + change + \"deg\",\n      direction,\n      pt;\n\n  if (isString) {\n    direction = endValue.split(\"_\")[1];\n\n    if (direction === \"short\") {\n      change %= cap;\n\n      if (change !== change % (cap / 2)) {\n        change += change < 0 ? cap : -cap;\n      }\n    }\n\n    if (direction === \"cw\" && change < 0) {\n      change = (change + cap * _bigNum) % cap - ~~(change / cap) * cap;\n    } else if (direction === \"ccw\" && change > 0) {\n      change = (change - cap * _bigNum) % cap - ~~(change / cap) * cap;\n    }\n  }\n\n  plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);\n  pt.e = finalValue;\n  pt.u = \"deg\";\n\n  plugin._props.push(property);\n\n  return pt;\n},\n    _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {\n  //for handling cases where someone passes in a whole transform string, like transform: \"scale(2, 3) rotate(20deg) translateY(30em)\"\n  var style = _tempDivStyler.style,\n      startCache = target._gsap,\n      exclude = \"perspective,force3D,transformOrigin,svgOrigin\",\n      endCache,\n      p,\n      startValue,\n      endValue,\n      startNum,\n      endNum,\n      startUnit,\n      endUnit;\n  style.cssText = getComputedStyle(target).cssText + \";position:absolute;display:block;\"; //%-based translations will fail unless we set the width/height to match the original target (and padding/borders can affect it)\n\n  style[_transformProp] = transforms;\n\n  _doc.body.appendChild(_tempDivStyler);\n\n  endCache = _parseTransform(_tempDivStyler, 1);\n\n  for (p in _transformProps) {\n    startValue = startCache[p];\n    endValue = endCache[p];\n\n    if (startValue !== endValue && exclude.indexOf(p) < 0) {\n      //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.\n      startUnit = getUnit(startValue);\n      endUnit = getUnit(endValue);\n      startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);\n      endNum = parseFloat(endValue);\n      plugin._pt = new PropTween(plugin._pt, startCache, p, startNum, endNum - startNum, _renderCSSProp);\n      plugin._pt.u = endUnit || 0;\n\n      plugin._props.push(p);\n    }\n  }\n\n  _doc.body.removeChild(_tempDivStyler);\n}; // handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.\n\n\n_forEachName(\"padding,margin,Width,Radius\", function (name, index) {\n  var t = \"Top\",\n      r = \"Right\",\n      b = \"Bottom\",\n      l = \"Left\",\n      props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {\n    return index < 2 ? name + side : \"border\" + side + name;\n  });\n\n  _specialProps[index > 1 ? \"border\" + name : name] = function (plugin, target, property, endValue, tween) {\n    var a, vars;\n\n    if (arguments.length < 4) {\n      // getter, passed target, property, and unit (from _get())\n      a = props.map(function (prop) {\n        return _get(plugin, prop, property);\n      });\n      vars = a.join(\" \");\n      return vars.split(a[0]).length === 5 ? a[0] : vars;\n    }\n\n    a = (endValue + \"\").split(\" \");\n    vars = {};\n    props.forEach(function (prop, i) {\n      return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];\n    });\n    plugin.init(target, vars, tween);\n  };\n});\n\nexport var CSSPlugin = {\n  name: \"css\",\n  register: _initCore,\n  targetTest: function targetTest(target) {\n    return target.style && target.nodeType;\n  },\n  init: function init(target, vars, tween, index, targets) {\n    var props = this._props,\n        style = target.style,\n        startAt = tween.vars.startAt,\n        startValue,\n        endValue,\n        endNum,\n        startNum,\n        type,\n        specialProp,\n        p,\n        startUnit,\n        endUnit,\n        relative,\n        isTransformRelated,\n        transformPropTween,\n        cache,\n        smooth,\n        hasPriority;\n    _pluginInitted || _initCore();\n\n    for (p in vars) {\n      if (p === \"autoRound\") {\n        continue;\n      }\n\n      endValue = vars[p];\n\n      if (_plugins[p] && _checkPlugin(p, vars, tween, index, target, targets)) {\n        // plugins\n        continue;\n      }\n\n      type = typeof endValue;\n      specialProp = _specialProps[p];\n\n      if (type === \"function\") {\n        endValue = endValue.call(tween, index, target, targets);\n        type = typeof endValue;\n      }\n\n      if (type === \"string\" && ~endValue.indexOf(\"random(\")) {\n        endValue = _replaceRandom(endValue);\n      }\n\n      if (specialProp) {\n        specialProp(this, target, p, endValue, tween) && (hasPriority = 1);\n      } else if (p.substr(0, 2) === \"--\") {\n        //CSS variable\n        startValue = (getComputedStyle(target).getPropertyValue(p) + \"\").trim();\n        endValue += \"\";\n        startUnit = getUnit(startValue);\n        endUnit = getUnit(endValue);\n        endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);\n        this.add(style, \"setProperty\", startValue, endValue, index, targets, 0, 0, p);\n      } else if (type !== \"undefined\") {\n        if (startAt && p in startAt) {\n          // in case someone hard-codes a complex value as the start, like top: \"calc(2vh / 2)\". Without this, it'd use the computed value (always in px)\n          startValue = typeof startAt[p] === \"function\" ? startAt[p].call(tween, index, target, targets) : startAt[p];\n          p in _config.units && !getUnit(startValue) && (startValue += _config.units[p]); // for cases when someone passes in a unitless value like {x: 100}; if we try setting translate(100, 0px) it won't work.\n\n          (startValue + \"\").charAt(1) === \"=\" && (startValue = _get(target, p)); // can't work with relative values\n        } else {\n          startValue = _get(target, p);\n        }\n\n        startNum = parseFloat(startValue);\n        relative = type === \"string\" && endValue.charAt(1) === \"=\" ? +(endValue.charAt(0) + \"1\") : 0;\n        relative && (endValue = endValue.substr(2));\n        endNum = parseFloat(endValue);\n\n        if (p in _propertyAliases) {\n          if (p === \"autoAlpha\") {\n            //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.\n            if (startNum === 1 && _get(target, \"visibility\") === \"hidden\" && endNum) {\n              //if visibility is initially set to \"hidden\", we should interpret that as intent to make opacity 0 (a convenience)\n              startNum = 0;\n            }\n\n            _addNonTweeningPT(this, style, \"visibility\", startNum ? \"inherit\" : \"hidden\", endNum ? \"inherit\" : \"hidden\", !endNum);\n          }\n\n          if (p !== \"scale\" && p !== \"transform\") {\n            p = _propertyAliases[p];\n            ~p.indexOf(\",\") && (p = p.split(\",\")[0]);\n          }\n        }\n\n        isTransformRelated = p in _transformProps; //--- TRANSFORM-RELATED ---\n\n        if (isTransformRelated) {\n          if (!transformPropTween) {\n            cache = target._gsap;\n            cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform); // if, for example, gsap.set(... {transform:\"translateX(50vw)\"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.\n\n            smooth = vars.smoothOrigin !== false && cache.smooth;\n            transformPropTween = this._pt = new PropTween(this._pt, style, _transformProp, 0, 1, cache.renderTransform, cache, 0, -1); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)\n\n            transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.\n          }\n\n          if (p === \"scale\") {\n            this._pt = new PropTween(this._pt, cache, \"scaleY\", cache.scaleY, relative ? relative * endNum : endNum - cache.scaleY);\n            props.push(\"scaleY\", p);\n            p += \"X\";\n          } else if (p === \"transformOrigin\") {\n            endValue = _convertKeywordsToPercentages(endValue); //in case something like \"left top\" or \"bottom right\" is passed in. Convert to percentages.\n\n            if (cache.svg) {\n              _applySVGOrigin(target, endValue, 0, smooth, 0, this);\n            } else {\n              endUnit = parseFloat(endValue.split(\" \")[2]) || 0; //handle the zOrigin separately!\n\n              endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, \"zOrigin\", cache.zOrigin, endUnit);\n\n              _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));\n            }\n\n            continue;\n          } else if (p === \"svgOrigin\") {\n            _applySVGOrigin(target, endValue, 1, smooth, 0, this);\n\n            continue;\n          } else if (p in _rotationalProperties) {\n            _addRotationalPropTween(this, cache, p, startNum, endValue, relative);\n\n            continue;\n          } else if (p === \"smoothOrigin\") {\n            _addNonTweeningPT(this, cache, \"smooth\", cache.smooth, endValue);\n\n            continue;\n          } else if (p === \"force3D\") {\n            cache[p] = endValue;\n            continue;\n          } else if (p === \"transform\") {\n            _addRawTransformPTs(this, endValue, target);\n\n            continue;\n          }\n        } else if (!(p in style)) {\n          p = _checkPropPrefix(p) || p;\n        }\n\n        if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {\n          startUnit = (startValue + \"\").substr((startNum + \"\").length);\n          endNum || (endNum = 0); // protect against NaN\n\n          endUnit = getUnit(endValue) || (p in _config.units ? _config.units[p] : startUnit);\n          startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));\n          this._pt = new PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, relative ? relative * endNum : endNum - startNum, !isTransformRelated && (endUnit === \"px\" || p === \"zIndex\") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);\n          this._pt.u = endUnit || 0;\n\n          if (startUnit !== endUnit) {\n            //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a \"b\" (beginning) property and point to a render method that handles that. (performance optimization)\n            this._pt.b = startValue;\n            this._pt.r = _renderCSSPropWithBeginning;\n          }\n        } else if (!(p in style)) {\n          if (p in target) {\n            //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.\n            this.add(target, p, target[p], endValue, index, targets);\n          } else {\n            _missingPlugin(p, endValue);\n\n            continue;\n          }\n        } else {\n          _tweenComplexCSSString.call(this, target, p, startValue, endValue);\n        }\n\n        props.push(p);\n      }\n    }\n\n    hasPriority && _sortPropTweensByPriority(this);\n  },\n  get: _get,\n  aliases: _propertyAliases,\n  getSetter: function getSetter(target, property, plugin) {\n    //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like \"x\" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.\n    var p = _propertyAliases[property];\n    p && p.indexOf(\",\") < 0 && (property = p);\n    return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, \"x\")) ? plugin && _recentSetterPlugin === plugin ? property === \"scale\" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === \"scale\" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !_isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf(\"-\") ? _setterCSSProp : _getSetter(target, property);\n  },\n  core: {\n    _removeProperty: _removeProperty,\n    _getMatrix: _getMatrix\n  }\n};\ngsap.utils.checkPrefix = _checkPropPrefix;\n\n(function (positionAndScale, rotation, others, aliases) {\n  var all = _forEachName(positionAndScale + \",\" + rotation + \",\" + others, function (name) {\n    _transformProps[name] = 1;\n  });\n\n  _forEachName(rotation, function (name) {\n    _config.units[name] = \"deg\";\n    _rotationalProperties[name] = 1;\n  });\n\n  _propertyAliases[all[13]] = positionAndScale + \",\" + rotation;\n\n  _forEachName(aliases, function (name) {\n    var split = name.split(\":\");\n    _propertyAliases[split[1]] = all[split[0]];\n  });\n})(\"x,y,z,scale,scaleX,scaleY,xPercent,yPercent\", \"rotation,rotationX,rotationY,skewX,skewY\", \"transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective\", \"0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY\");\n\n_forEachName(\"x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective\", function (name) {\n  _config.units[name] = \"px\";\n});\n\ngsap.registerPlugin(CSSPlugin);\nexport { CSSPlugin as default, _getBBox, _createElement, _checkPropPrefix as checkPrefix };","import { gsap, Power0, Power1, Power2, Power3, Power4, Linear, Quad, Cubic, Quart, Quint, Strong, Elastic, Back, SteppedEase, Bounce, Sine, Expo, Circ, TweenLite, TimelineLite, TimelineMax } from \"./gsap-core.js\";\nimport { CSSPlugin } from \"./CSSPlugin.js\";\nvar gsapWithCSS = gsap.registerPlugin(CSSPlugin) || gsap,\n    // to protect from tree shaking\nTweenMaxWithCSS = gsapWithCSS.core.Tween;\nexport { gsapWithCSS as gsap, gsapWithCSS as default, CSSPlugin, TweenMaxWithCSS as TweenMax, TweenLite, TimelineMax, TimelineLite, Power0, Power1, Power2, Power3, Power4, Linear, Quad, Cubic, Quart, Quint, Strong, Elastic, Back, SteppedEase, Bounce, Sine, Expo, Circ };","import {\n\tEventDispatcher,\n\tMOUSE,\n\tQuaternion,\n\tSpherical,\n\tTOUCH,\n\tVector2,\n\tVector3\n} from '../../../build/three.module.js';\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nvar OrbitControls = function ( object, domElement ) {\n\n\tif ( domElement === undefined ) console.warn( 'THREE.OrbitControls: The second parameter \"domElement\" is now mandatory.' );\n\tif ( domElement === document ) console.error( 'THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.' );\n\n\tthis.object = object;\n\tthis.domElement = domElement;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.05;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.panSpeed = 1.0;\n\tthis.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// Set to false to disable use of the keys\n\tthis.enableKeys = true;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n\t// Touch fingers\n\tthis.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\n\t};\n\n\tthis.saveState = function () {\n\n\t\tscope.target0.copy( scope.target );\n\t\tscope.position0.copy( scope.object.position );\n\t\tscope.zoom0 = scope.object.zoom;\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy( scope.target0 );\n\t\tscope.object.position.copy( scope.position0 );\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent( changeEvent );\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function () {\n\n\t\tvar offset = new Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n\t\tvar quatInverse = quat.clone().invert();\n\n\t\tvar lastPosition = new Vector3();\n\t\tvar lastQuaternion = new Quaternion();\n\n\t\tvar twoPI = 2 * Math.PI;\n\n\t\treturn function update() {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3( offset );\n\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tif ( scope.enableDamping ) {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta * scope.dampingFactor;\n\t\t\t\tspherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n\t\t\t} else {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t}\n\n\t\t\t// restrict theta to be between desired limits\n\n\t\t\tvar min = scope.minAzimuthAngle;\n\t\t\tvar max = scope.maxAzimuthAngle;\n\n\t\t\tif ( isFinite( min ) && isFinite( max ) ) {\n\n\t\t\t\tif ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n\t\t\t\tif ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n\t\t\t\tif ( min <= max ) {\n\n\t\t\t\t\tspherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tspherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n\t\t\t\t\t\tMath.max( min, spherical.theta ) :\n\t\t\t\t\t\tMath.min( max, spherical.theta );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\tspherical.makeSafe();\n\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t// move target to panned location\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tscope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t}\n\n\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\tpanOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tscale = 1;\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif ( zoomChanged ||\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t}();\n\n\tthis.dispose = function () {\n\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\n\t\tscope.domElement.removeEventListener( 'pointerdown', onPointerDown, false );\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointermove', onPointerMove, false );\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointerup', onPointerUp, false );\n\n\t\tscope.domElement.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = {\n\t\tNONE: - 1,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2,\n\t\tTOUCH_ROTATE: 3,\n\t\tTOUCH_PAN: 4,\n\t\tTOUCH_DOLLY_PAN: 5,\n\t\tTOUCH_DOLLY_ROTATE: 6\n\t};\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new Spherical();\n\tvar sphericalDelta = new Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new Vector2();\n\tvar rotateEnd = new Vector2();\n\tvar rotateDelta = new Vector2();\n\n\tvar panStart = new Vector2();\n\tvar panEnd = new Vector2();\n\tvar panDelta = new Vector2();\n\n\tvar dollyStart = new Vector2();\n\tvar dollyEnd = new Vector2();\n\tvar dollyDelta = new Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction rotateLeft( angle ) {\n\n\t\tsphericalDelta.theta -= angle;\n\n\t}\n\n\tfunction rotateUp( angle ) {\n\n\t\tsphericalDelta.phi -= angle;\n\n\t}\n\n\tvar panLeft = function () {\n\n\t\tvar v = new Vector3();\n\n\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\tv.multiplyScalar( - distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\tvar panUp = function () {\n\n\t\tvar v = new Vector3();\n\n\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\tif ( scope.screenSpacePanning === true ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t\tv.crossVectors( scope.object.up, v );\n\n\t\t\t}\n\n\t\t\tv.multiplyScalar( distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function () {\n\n\t\tvar offset = new Vector3();\n\n\t\treturn function pan( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement;\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\tscope.enablePan = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\tfunction dollyOut( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\tfunction dollyIn( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate( event ) {\n\n\t\trotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownDolly( event ) {\n\n\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownPan( event ) {\n\n\t\tpanStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseMoveRotate( event ) {\n\n\t\trotateEnd.set( event.clientX, event.clientY );\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMoveDolly( event ) {\n\n\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMovePan( event ) {\n\n\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseUp( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\tfunction handleMouseWheel( event ) {\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleKeyDown( event ) {\n\n\t\tvar needsUpdate = false;\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\tevent.preventDefault();\n\n\t\t\tscope.update();\n\n\t\t}\n\n\n\t}\n\n\tfunction handleTouchStartRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartPan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyStart.set( 0, distance );\n\n\t}\n\n\tfunction handleTouchStartDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchStartPan( event );\n\n\t}\n\n\tfunction handleTouchStartDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchStartRotate( event );\n\n\t}\n\n\tfunction handleTouchMoveRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateEnd.set( x, y );\n\n\t\t}\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t}\n\n\tfunction handleTouchMovePan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanEnd.set( x, y );\n\n\t\t}\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t}\n\n\tfunction handleTouchMoveDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyEnd.set( 0, distance );\n\n\t\tdollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n\t\tdollyOut( dollyDelta.y );\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t}\n\n\tfunction handleTouchMoveDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchMovePan( event );\n\n\t}\n\n\tfunction handleTouchMoveDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n\t}\n\n\tfunction handleTouchEnd( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onPointerDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\tcase 'pen':\n\t\t\t\tonMouseDown( event );\n\t\t\t\tbreak;\n\n\t\t\t// TODO touch\n\n\t\t}\n\n\t}\n\n\tfunction onPointerMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\tcase 'pen':\n\t\t\t\tonMouseMove( event );\n\t\t\t\tbreak;\n\n\t\t\t// TODO touch\n\n\t\t}\n\n\t}\n\n\tfunction onPointerUp( event ) {\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\tcase 'pen':\n\t\t\t\tonMouseUp( event );\n\t\t\t\tbreak;\n\n\t\t\t// TODO touch\n\n\t\t}\n\n\t}\n\n\tfunction onMouseDown( event ) {\n\n\t\t// Prevent the browser from scrolling.\n\t\tevent.preventDefault();\n\n\t\t// Manually set the focus since calling preventDefault above\n\t\t// prevents the browser from setting it automatically.\n\n\t\tscope.domElement.focus ? scope.domElement.focus() : window.focus();\n\n\t\tvar mouseAction;\n\n\t\tswitch ( event.button ) {\n\n\t\t\tcase 0:\n\n\t\t\t\tmouseAction = scope.mouseButtons.LEFT;\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\n\t\t\t\tmouseAction = scope.mouseButtons.MIDDLE;\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tmouseAction = scope.mouseButtons.RIGHT;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tmouseAction = - 1;\n\n\t\t}\n\n\t\tswitch ( mouseAction ) {\n\n\t\t\tcase MOUSE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t\tbreak;\n\n\t\t\tcase MOUSE.ROTATE:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase MOUSE.PAN:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.domElement.ownerDocument.addEventListener( 'pointermove', onPointerMove, false );\n\t\t\tscope.domElement.ownerDocument.addEventListener( 'pointerup', onPointerUp, false );\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction onMouseUp( event ) {\n\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointermove', onPointerMove, false );\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointerup', onPointerUp, false );\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleMouseUp( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tscope.dispatchEvent( startEvent );\n\n\t\thandleMouseWheel( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\thandleKeyDown( event );\n\n\t}\n\n\tfunction onTouchStart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\n\n\t\t\t\tswitch ( scope.touches.ONE ) {\n\n\t\t\t\t\tcase TOUCH.ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TOUCH.PAN:\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tswitch ( scope.touches.TWO ) {\n\n\t\t\t\t\tcase TOUCH.DOLLY_PAN:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TOUCH.DOLLY_ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onTouchMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\t\tevent.stopPropagation();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.TOUCH_ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_PAN:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMoveDollyPan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_ROTATE:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveDollyRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction onTouchEnd( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleTouchEnd( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onContextMenu( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\tscope.domElement.addEventListener( 'pointerdown', onPointerDown, false );\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\tscope.domElement.addEventListener( 'keydown', onKeyDown, false );\n\n\t// force an update at start\n\n\tthis.update();\n\n};\n\nOrbitControls.prototype = Object.create( EventDispatcher.prototype );\nOrbitControls.prototype.constructor = OrbitControls;\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n// This is very similar to OrbitControls, another set of touch behavior\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\n\nvar MapControls = function ( object, domElement ) {\n\n\tOrbitControls.call( this, object, domElement );\n\n\tthis.screenSpacePanning = false; // pan orthogonal to world-space direction camera.up\n\n\tthis.mouseButtons.LEFT = MOUSE.PAN;\n\tthis.mouseButtons.RIGHT = MOUSE.ROTATE;\n\n\tthis.touches.ONE = TOUCH.PAN;\n\tthis.touches.TWO = TOUCH.DOLLY_ROTATE;\n\n};\n\nMapControls.prototype = Object.create( EventDispatcher.prototype );\nMapControls.prototype.constructor = MapControls;\n\nexport { OrbitControls, MapControls };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport { forwardRef, useEffect, createElement } from 'react';\nimport { useThree, useFrame } from 'react-three-fiber';\nimport useEffectfulState from '../helpers/useEffectfulState.js';\nimport { OrbitControls as OrbitControls$1 } from 'three/examples/jsm/controls/OrbitControls';\n\nconst OrbitControls = /*#__PURE__*/forwardRef((props = {\n  enableDamping: true\n}, ref) => {\n  const {\n    camera,\n    gl,\n    invalidate\n  } = useThree();\n  const controls = useEffectfulState(() => new OrbitControls$1(camera, gl.domElement), [camera, gl], ref);\n  useFrame(() => controls == null ? void 0 : controls.update());\n  useEffect(() => {\n    controls == null ? void 0 : controls.addEventListener == null ? void 0 : controls.addEventListener('change', invalidate);\n    return () => controls == null ? void 0 : controls.removeEventListener == null ? void 0 : controls.removeEventListener('change', invalidate);\n  }, [controls, invalidate]);\n  return controls ? /*#__PURE__*/createElement(\"primitive\", _extends({\n    dispose: undefined,\n    object: controls,\n    enableDamping: true\n  }, props)) : null;\n});\n\nexport { OrbitControls };\n"],"sourceRoot":""}