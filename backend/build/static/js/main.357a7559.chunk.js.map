{"version":3,"sources":["reducers/userReducer.js","components/ErrorBoundary/ErrorBoundary.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","i18n.js","reducers/notificationReducer.js","store.js","index.js","reducers/themeReducer.js","reducers/languageReducer.js","components/CustomLoader/CustomLoader.js","utils/languageService.js","assets/themes/dark.js","assets/themes/light.js","utils/themeService.js","components/CustomLoader/CustomLoader.module.css"],"names":["userReducer","state","action","type","data","ErrorBoundary","props","hasError","this","children","React","Component","MainView","lazy","SettingsView","App","d","useDispatch","theme","useSelector","store","storeTheme","name","provideTheme","useEffect","user","loggedUserJSON","window","localStorage","getItem","JSON","parse","dispatch","a","setItem","stringify","lang","setLanguage","localtheme","setTheme","ThemeProvider","CssBaseline","fallback","CustomLoader","path","component","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","startLang","defaultLanguage","i18n","use","Backend","initReactI18next","init","lng","short","fallbackLng","debug","backend","loadPath","allowMultiLoading","react","wait","useSuspense","notificationReducer","concat","filter","n","id","reducer","combineReducers","language","languageReducer","notification","themeReducer","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","size","useTheme","className","styles","container","color","palette","primary","main","defaultProps","languages","getByName","l","dark","footer","light","availableThemes","createMuiTheme","module","exports"],"mappings":"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","file":"static/js/main.357a7559.chunk.js","sourcesContent":["const userReducer = (state = null, action) => {\n  switch (action.type) {\n  case 'SET_USER':\n    return action.data\n  default:\n    return state\n  }\n}\n\nexport const setUser = (user) => {\n  return async dispatch => {\n    window.localStorage.setItem('loggedUser', JSON.stringify(user))\n    dispatch({\n      type: 'SET_USER',\n      data: user\n    })\n  }\n}\n\nexport default userReducer","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  static getDerivedStateFromError(/*error*/) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true }\n  }\n\n  componentDidCatch(/*error, errorInfo*/) {\n    // You can also log the error to an error reporting service\n    //logErrorToMyService(error, errorInfo)\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>\n    }\n\n    return this.props.children\n  }\n}\n\nErrorBoundary.propTypes = {\n  /** Contained elements */\n  children: PropTypes.node.isRequired\n}\n\nexport default ErrorBoundary","import React, { Suspense, useEffect, lazy } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Route, Switch } from 'react-router-dom'\nimport { ThemeProvider } from '@material-ui/core/styles'\n\nimport { setUser } from './reducers/userReducer'\nimport { setLanguage } from './reducers/languageReducer'\nimport { setTheme } from './reducers/themeReducer'\n\nimport provideTheme from './utils/themeService'\n\n// Components\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport CustomLoader from './components/CustomLoader/CustomLoader'\nimport ErrorBoundary from './components/ErrorBoundary/ErrorBoundary'\n\n// Views\nconst MainView = lazy(() => import('./views/MainView/MainView'))\nconst SettingsView = lazy(() => import('./views/SettingsView/SettingsView'))\n\nconst App = () => {\n  const d = useDispatch()\n\n  // Fetch theme\n  const theme = useSelector(store => {\n    const storeTheme = store.theme ?? { name: 'dark' }\n    return provideTheme(storeTheme.name)\n  })\n\n  // Setup user, language and theme\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedUser')\n    if (loggedUserJSON) {\n      d(setUser(JSON.parse(loggedUserJSON)))\n    }\n\n    const lang = window.localStorage.getItem('selectedLanguage')\n    if (lang) {\n      d(setLanguage(JSON.parse(lang)))\n    }\n\n    const localtheme = window.localStorage.getItem('selectedTheme')\n    if (localtheme) {\n      d(setTheme(JSON.parse(localtheme)))\n    }\n    else {\n      window.localStorage.setItem('selectedTheme', JSON.stringify({ name: 'dark' }))\n    }\n  }, [d])\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <ErrorBoundary>\n        <Suspense fallback={<CustomLoader />} >\n          <Switch>\n            <Route path='/settings' component={SettingsView} />\n            <Route path='/' component={MainView} />\n          </Switch>\n        </Suspense>\n      </ErrorBoundary>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker === null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType !== null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import i18n from 'i18next'\nimport { initReactI18next } from 'react-i18next'\n\nimport Backend from 'i18next-http-backend'\n\nimport defaultLanguage from './utils/languageService'\n\n// Get the stored language for the translator\nconst startLang = window.localStorage.getItem('selectedLanguage')\nif (!startLang) {\n  window.localStorage.setItem('selectedLanguage', JSON.stringify(defaultLanguage))\n}\n\ni18n\n  .use(Backend)\n  .use(initReactI18next)\n  .init({\n    lng: startLang ? JSON.parse(startLang).short : defaultLanguage.short,\n    fallbackLng: 'en',\n    debug: true,\n    backend: {\n      loadPath: '/locales/{{lng}}/{{ns}}.json',\n      allowMultiLoading: false\n    },\n    react: {\n      wait: true,\n      useSuspense: true\n    }\n  })\n\n\nexport default i18n","import Check from '@material-ui/icons/Check'\nimport Warning from '@material-ui/icons/Warning'\n\nconst notificationReducer = (state = [], action) => {\n  switch (action.type) {\n  case 'SET_NOTIFICATION':\n    return state.concat(action.data)\n  case 'REMOVE_NOTIFICATION':\n    return state.filter(n => n.id !== action.data)\n  default:\n    return state\n  }\n}\n\nfunction uuid() {\n  return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\n    ((c ^ crypto.getRandomValues(new Uint8Array(1))[0]) & (15 >> (c / 4))).toString(16)\n  )\n}\n\nconst DEFAULT_TIME = 10000\n\nexport const setInfo = (msg, timeout = DEFAULT_TIME) => {\n  return async dispatch => {\n    const id = uuid()\n    dispatch({\n      type: 'SET_NOTIFICATION',\n      data: {\n        id,\n        message: msg,\n        color: 'info',\n        icon: 'info_outline'\n      }\n    })\n\n    setTimeout(() => {\n      dispatch(removeNotif(id))\n    }, timeout)\n  }\n}\n\nexport const setSuccess = (msg, timeout = DEFAULT_TIME) => {\n  return async dispatch => {\n    const id = uuid()\n    dispatch({\n      type: 'SET_NOTIFICATION',\n      data: {\n        id,\n        message: msg,\n        color: 'success',\n        icon: Check\n      }\n    })\n\n    setTimeout(() => {\n      dispatch(removeNotif(id))\n    }, timeout)\n  }\n}\n\nexport const setError = (msg, timeout = DEFAULT_TIME) => {\n  return async dispatch => {\n    const id = uuid()\n    dispatch({\n      type: 'SET_NOTIFICATION',\n      data: {\n        id,\n        message: msg,\n        color: 'danger',\n        icon: Warning\n      }\n    })\n\n    setTimeout(() => {\n      dispatch(removeNotif(id))\n    }, timeout)\n  }\n}\n\nconst removeNotif = id => {\n  return async dispatch => {\n    dispatch({\n      type: 'REMOVE_NOTIFICATION',\n      data: id\n    })\n  }\n}\n\nexport default notificationReducer","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport userReducer from './reducers/userReducer'\nimport languageReducer from './reducers/languageReducer'\nimport notificationReducer from './reducers/notificationReducer'\nimport themeReducer from './reducers/themeReducer'\n\nconst reducer = combineReducers({\n  user: userReducer,\n  language: languageReducer,\n  notification: notificationReducer,\n  theme: themeReducer\n})\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk)\n  )\n)\n\nexport default store","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals'\nimport { HashRouter } from 'react-router-dom'\n\nimport CustomLoader from './components/CustomLoader/CustomLoader'\nimport ErrorBoundary from './components/ErrorBoundary/ErrorBoundary'\n\n// Translations\nimport './i18n'\n\n// Redux store\nimport store from './store'\n\n// CSS for whole app\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store={store}>\n        <ErrorBoundary>\n          <Suspense fallback={<CustomLoader />} >\n            <App />\n          </Suspense>\n        </ErrorBoundary>\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","const themeReducer = (state = null, action) => {\n  switch (action.type) {\n  case 'SET_THEME':\n    return action.data\n  default:\n    return state\n  }\n}\n\nexport const setTheme = (theme) => {\n  return async dispatch => {\n    window.localStorage.setItem('selectedTheme', JSON.stringify(theme))\n    dispatch({\n      type: 'SET_THEME',\n      data: theme\n    })\n  }\n}\n\nexport default themeReducer","const languageReducer = (state = null, action) => {\n  switch (action.type) {\n  case 'SET_LANGUAGE':\n    return action.data\n  default:\n    return state\n  }\n}\n\nexport const setLanguage = (lang) => {\n  return async dispatch => {\n    window.localStorage.setItem('selectedLanguage', JSON.stringify(lang))\n    dispatch({\n      type: 'SET_LANGUAGE',\n      data: lang\n    })\n  }\n}\n\nexport default languageReducer","import React from 'react'\nimport { useTheme } from '@material-ui/styles'\nimport PropTypes from 'prop-types'\n\nimport { SolarSystemLoading } from 'react-loadingg'\n\nimport styles from './CustomLoader.module.css'\n\nconst CustomLoader = ({ size }) => {\n  const theme = useTheme()\n\n  return (\n    <div className={styles.container}>\n      <SolarSystemLoading\n        size={size}\n        color={theme.palette.primary.main}\n      />\n    </div>\n  )\n}\n\nCustomLoader.propTypes = {\n  size: PropTypes.oneOf(['small', 'default', 'large']),\n}\n\nCustomLoader.defaultProps = {\n  size: 'default',\n}\n\nexport default CustomLoader","// TODO: translations for language names?\n\nexport const languages = [\n  {\n    short: 'en',\n    name: 'English'\n  },\n  {\n    short: 'fi',\n    name: 'Suomi'\n  }\n]\n\nexport const getByName = name => {\n  return languages.filter(l => l.name === name)[0]\n}\n\nconst defaultLanguage = {\n  short: 'en',\n  name: 'English'\n}\n\nexport default defaultLanguage","const dark = {\n  palette: {\n    type: 'dark',\n    footer: {\n      main: '#424242'\n    }\n  },\n}\n\nexport default dark","const light = {\n  palette: {\n    type: 'light',\n    footer: {\n      main: '#eeeeee'\n    }\n  },\n}\n\nexport default light","import { unstable_createMuiStrictModeTheme as createMuiTheme } from '@material-ui/core/styles'\n\n// Themes, use lazy loading to fetch only needed themes\nimport dark from '../assets/themes/dark'\nimport light from '../assets/themes/light'\n\nconst provideTheme = (name) => {\n  let theme\n  if (name === 'dark') {\n    theme = dark\n  } else if (name === 'light') {\n    theme = light\n  } else {\n    theme = dark\n  }\n\n  return createMuiTheme(theme)\n}\n\nexport const availableThemes = [\n  { name: 'dark' },\n  { name: 'light' }\n]\n\nexport default provideTheme","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CustomLoader_container__3cfzx\"};"],"sourceRoot":""}