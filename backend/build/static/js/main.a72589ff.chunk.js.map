{"version":3,"sources":["reducers/userReducer.js","components/ErrorBoundary/ErrorBoundary.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","i18n.js","reducers/notificationReducer.js","store.js","index.js","reducers/themeReducer.js","reducers/languageReducer.js","components/CustomLoader/CustomLoader.js","utils/languageService.js","assets/themes/dark.js","assets/themes/light.js","utils/themeService.js","components/CustomLoader/CustomLoader.module.css"],"names":["userReducer","state","action","type","data","ErrorBoundary","props","hasError","this","children","React","Component","MainView","lazy","SettingsView","App","d","useDispatch","theme","useSelector","store","storeTheme","name","provideTheme","useEffect","user","loggedUserJSON","window","localStorage","getItem","JSON","parse","dispatch","a","setItem","stringify","lang","setLanguage","localtheme","setTheme","ThemeProvider","CssBaseline","fallback","CustomLoader","path","component","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","startLang","defaultLanguage","i18n","use","Backend","initReactI18next","init","lng","short","fallbackLng","debug","backend","loadPath","allowMultiLoading","react","wait","useSuspense","notificationReducer","concat","filter","n","id","reducer","combineReducers","language","languageReducer","notification","themeReducer","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","size","useTheme","className","styles","container","color","palette","primary","main","defaultProps","languages","getByName","l","dark","footer","light","availableThemes","createMuiTheme","module","exports"],"mappings":"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","file":"static/js/main.a72589ff.chunk.js","sourcesContent":["const userReducer = (state = null, action) => {\n  switch (action.type) {\n  case 'SET_USER':\n    return action.data\n  default:\n    return state\n  }\n}\n\nexport const setUser = (user) => {\n  return async dispatch => {\n    window.localStorage.setItem('loggedUser', JSON.stringify(user))\n    dispatch({\n      type: 'SET_USER',\n      data: user\n    })\n  }\n}\n\nexport default userReducer","import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  static getDerivedStateFromError(/*error*/) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true }\n  }\n\n  componentDidCatch(/*error, errorInfo*/) {\n    // You can also log the error to an error reporting service\n    //logErrorToMyService(error, errorInfo)\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>\n    }\n\n    return this.props.children\n  }\n}\n\nErrorBoundary.propTypes = {\n  /** Contained elements */\n  children: PropTypes.node.isRequired\n}\n\nexport default ErrorBoundary","import React, { Suspense, useEffect, lazy } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Route, Switch } from 'react-router-dom'\r\nimport { ThemeProvider } from '@material-ui/core/styles'\r\n\r\nimport { setUser } from './reducers/userReducer'\r\nimport { setLanguage } from './reducers/languageReducer'\r\nimport { setTheme } from './reducers/themeReducer'\r\n\r\nimport provideTheme from './utils/themeService'\r\n\r\n// Components\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport CustomLoader from './components/CustomLoader/CustomLoader'\r\nimport ErrorBoundary from './components/ErrorBoundary/ErrorBoundary'\r\n\r\n// Views\r\nconst MainView = lazy(() => import('./views/MainView/MainView'))\r\nconst SettingsView = lazy(() => import('./views/SettingsView/SettingsView'))\r\n\r\nconst App = () => {\r\n  const d = useDispatch()\r\n\r\n  // Fetch theme\r\n  const theme = useSelector(store => {\r\n    const storeTheme = store.theme ?? { name: 'dark' }\r\n    return provideTheme(storeTheme.name)\r\n  })\r\n\r\n  // Setup user, language and theme\r\n  useEffect(() => {\r\n    const loggedUserJSON = window.localStorage.getItem('loggedUser')\r\n    if (loggedUserJSON) {\r\n      d(setUser(JSON.parse(loggedUserJSON)))\r\n    }\r\n\r\n    const lang = window.localStorage.getItem('selectedLanguage')\r\n    if (lang) {\r\n      d(setLanguage(JSON.parse(lang)))\r\n    }\r\n\r\n    const localtheme = window.localStorage.getItem('selectedTheme')\r\n    if (localtheme) {\r\n      d(setTheme(JSON.parse(localtheme)))\r\n    }\r\n  }, [d])\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <ErrorBoundary>\r\n        <Suspense fallback={<CustomLoader />} >\r\n          <Switch>\r\n            <Route path='/settings' component={SettingsView} />\r\n            <Route path='/' component={MainView} />\r\n          </Switch>\r\n        </Suspense>\r\n      </ErrorBoundary>\r\n    </ThemeProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n)\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker === null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType !== null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.')\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister()\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import i18n from 'i18next'\r\nimport { initReactI18next } from 'react-i18next'\r\n\r\nimport Backend from 'i18next-http-backend'\r\n\r\nimport defaultLanguage from './utils/languageService'\r\n\r\n// Get the stored language for the translator\r\nconst startLang = window.localStorage.getItem('selectedLanguage')\r\nif (!startLang) {\r\n  window.localStorage.setItem('selectedLanguage', JSON.stringify(defaultLanguage))\r\n}\r\n\r\ni18n\r\n  .use(Backend)\r\n  .use(initReactI18next)\r\n  .init({\r\n    lng: startLang ? JSON.parse(startLang).short : defaultLanguage.short,\r\n    fallbackLng: 'en',\r\n    debug: true,\r\n    backend: {\r\n      loadPath: '/locales/{{lng}}/{{ns}}.json',\r\n      allowMultiLoading: false\r\n    },\r\n    react: {\r\n      wait: true,\r\n      useSuspense: true\r\n    }\r\n  })\r\n\r\n\r\nexport default i18n","import Check from '@material-ui/icons/Check'\nimport Warning from '@material-ui/icons/Warning'\n\nconst notificationReducer = (state = [], action) => {\n  switch (action.type) {\n  case 'SET_NOTIFICATION':\n    return state.concat(action.data)\n  case 'REMOVE_NOTIFICATION':\n    return state.filter(n => n.id !== action.data)\n  default:\n    return state\n  }\n}\n\nfunction uuid() {\n  return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\n    ((c ^ crypto.getRandomValues(new Uint8Array(1))[0]) & (15 >> (c / 4))).toString(16)\n  )\n}\n\nconst DEFAULT_TIME = 10000\n\nexport const setInfo = (msg, timeout = DEFAULT_TIME) => {\n  return async dispatch => {\n    const id = uuid()\n    dispatch({\n      type: 'SET_NOTIFICATION',\n      data: {\n        id,\n        message: msg,\n        color: 'info',\n        icon: 'info_outline'\n      }\n    })\n\n    setTimeout(() => {\n      dispatch(removeNotif(id))\n    }, timeout)\n  }\n}\n\nexport const setSuccess = (msg, timeout = DEFAULT_TIME) => {\n  return async dispatch => {\n    const id = uuid()\n    dispatch({\n      type: 'SET_NOTIFICATION',\n      data: {\n        id,\n        message: msg,\n        color: 'success',\n        icon: Check\n      }\n    })\n\n    setTimeout(() => {\n      dispatch(removeNotif(id))\n    }, timeout)\n  }\n}\n\nexport const setError = (msg, timeout = DEFAULT_TIME) => {\n  return async dispatch => {\n    const id = uuid()\n    dispatch({\n      type: 'SET_NOTIFICATION',\n      data: {\n        id,\n        message: msg,\n        color: 'danger',\n        icon: Warning\n      }\n    })\n\n    setTimeout(() => {\n      dispatch(removeNotif(id))\n    }, timeout)\n  }\n}\n\nconst removeNotif = id => {\n  return async dispatch => {\n    dispatch({\n      type: 'REMOVE_NOTIFICATION',\n      data: id\n    })\n  }\n}\n\nexport default notificationReducer","import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport userReducer from './reducers/userReducer'\nimport languageReducer from './reducers/languageReducer'\nimport notificationReducer from './reducers/notificationReducer'\nimport themeReducer from './reducers/themeReducer'\n\nconst reducer = combineReducers({\n  user: userReducer,\n  language: languageReducer,\n  notification: notificationReducer,\n  theme: themeReducer\n})\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk)\n  )\n)\n\nexport default store","import React, { Suspense } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport App from './App'\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n//import { createBrowserHistory } from 'history'\r\n\r\nimport CustomLoader from './components/CustomLoader/CustomLoader'\r\nimport ErrorBoundary from './components/ErrorBoundary/ErrorBoundary'\r\n\r\n// Translations\r\nimport './i18n'\r\n\r\n// Redux store\r\nimport store from './store'\r\n\r\n// CSS for whole app\r\nimport './index.css'\r\n\r\n//var hist = createBrowserHistory()\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter /*history={hist}*/>\r\n      <Provider store={store}>\r\n        <ErrorBoundary>\r\n          <Suspense fallback={<CustomLoader />} >\r\n            <App />\r\n          </Suspense>\r\n        </ErrorBoundary>\r\n      </Provider>\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister()\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n","const themeReducer = (state = null, action) => {\n  switch (action.type) {\n  case 'SET_THEME':\n    return action.data\n  default:\n    return state\n  }\n}\n\nexport const setTheme = (theme) => {\n  return async dispatch => {\n    window.localStorage.setItem('selectedTheme', JSON.stringify(theme))\n    dispatch({\n      type: 'SET_THEME',\n      data: theme\n    })\n  }\n}\n\nexport default themeReducer","const languageReducer = (state = null, action) => {\n  switch (action.type) {\n  case 'SET_LANGUAGE':\n    return action.data\n  default:\n    return state\n  }\n}\n\nexport const setLanguage = (lang) => {\n  return async dispatch => {\n    window.localStorage.setItem('selectedLanguage', JSON.stringify(lang))\n    dispatch({\n      type: 'SET_LANGUAGE',\n      data: lang\n    })\n  }\n}\n\nexport default languageReducer","import React from 'react'\r\nimport { useTheme } from '@material-ui/styles'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { SolarSystemLoading } from 'react-loadingg'\r\n\r\nimport styles from './CustomLoader.module.css'\r\n\r\nconst CustomLoader = ({ size }) => {\r\n  const theme = useTheme()\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <SolarSystemLoading\r\n        size={size}\r\n        color={theme.palette.primary.main}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nCustomLoader.propTypes = {\r\n  size: PropTypes.oneOf(['small', 'default', 'large']),\r\n}\r\n\r\nCustomLoader.defaultProps = {\r\n  size: 'default',\r\n}\r\n\r\nexport default CustomLoader","// TODO: translations for language names?\r\n\r\nexport const languages = [\r\n  {\r\n    short: 'en',\r\n    name: 'English'\r\n  },\r\n  {\r\n    short: 'fi',\r\n    name: 'Suomi'\r\n  }\r\n]\r\n\r\nexport const getByName = name => {\r\n  return languages.filter(l => l.name === name)[0]\r\n}\r\n\r\nconst defaultLanguage = {\r\n  short: 'en',\r\n  name: 'English'\r\n}\r\n\r\nexport default defaultLanguage","const dark = {\r\n  palette: {\r\n    type: 'dark',\r\n    footer: {\r\n      main: '#424242'\r\n    }\r\n  },\r\n}\r\n\r\nexport default dark","const light = {\r\n  palette: {\r\n    type: 'light',\r\n    footer: {\r\n      main: '#eeeeee'\r\n    }\r\n  },\r\n}\r\n\r\nexport default light","import { unstable_createMuiStrictModeTheme as createMuiTheme } from '@material-ui/core/styles'\r\n\r\n// Themes, use lazy loading to fetch only needed themes\r\nimport dark from '../assets/themes/dark'\r\nimport light from '../assets/themes/light'\r\n\r\nconst provideTheme = (name) => {\r\n  let theme\r\n  if (name === 'dark') {\r\n    theme = dark\r\n  } else if (name === 'light') {\r\n    theme = light\r\n  } else {\r\n    theme = dark\r\n  }\r\n\r\n  return createMuiTheme(theme)\r\n}\r\n\r\nexport const availableThemes = [\r\n  { name: 'dark' },\r\n  { name: 'light' }\r\n]\r\n\r\nexport default provideTheme","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CustomLoader_container__3cfzx\"};"],"sourceRoot":""}